summary(lm(y~x+offset(z)))
z=z+5
summary(lm(y~x+offset(z)))
z=z+100
summary(lm(y~x+offset(z)))
z=z/10
summary(lm(y~x+offset(z)))
z=z+log(10)
summary(lm(y~x+offset(z)))
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(y ~ x)
d1 <- c(0, 0 ,0, 0, 0,  0,  1 , 1,  1 , 1 , 1)
d2 <- c(1, 1 ,1, 1, 1,  1,  0 , 0,  0, 0 , 0)
summary(lm(y ~ d1*x))
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(y ~ x)
d1 <- c(0, 0 ,0, 0, 0,  0,  1 , 1,  1 , 1 , 1)
d2 <- c(1, 1 ,1, 1, 1,  1,  0 , 0,  0, 0 , 0)
# y = c + d1 * x + d2 * x
summary(lm(y ~ d1*x))
?offset
log(10)
=c(1:10)
x=y-1+rnorm(10)/10
z=c(1:10)
z=z*2
summary(lm(y~x+offset(z)))
y=c(1:10)
x=y-1+rnorm(10)/10
z=c(1:10)
z=z*2
summary(lm(y~x+offset(z)))
z=z+log(10)
summary(lm(y~x+offset(z)))
exit
exit
install.packages(c("e1071", "formatR", "Hmisc", "htmltools", "httr", "jsonlite", "KernSmooth", "Lahman", "markdown", "swirl", "UsingR"))
load(url("http://bit.ly/dasi_gss_data"))
source("http://bit.ly/dasi_inference")
inference(gss$educ, gss$xmarsex, est = "proportion", outcome, type = "ci", method, conflevel)
inference(gss$educ, gss$xmarsex, est = "proportion", outcome, type = "ci", method, conflevel)
quit()
load(url("http://bit.ly/dasi_gss_data"))
names(gss)
gss$educ
A <_gss$educ, gss$xmarsex
A <- gss$educ, gss$xmarsex
A <- c(gss$educ, gss$xmarsex)
A
names (A
0
names (A)
head(A)
A <- gss$educ, gss$xmarsex
gss$xmarsex
require(dplyr)
dim(gss)
select(educ, Year, Month, DayOfWeek))educ,xmarsex)
select(educ,xmarsex)
select(gss,educ,xmarsex)
select(gss,educ,xmarsex, na.rm=1)
select(gss,educ,xmarsex, na.rm=1)
?select
select(gss,educ,xmarsex, xmarsex!=="NA")
select(gss,educ,xmarsex, na.rm=1, nrow=1000)
select(gss,educ,xmarsex, nrow=1000)
select(gss,educ,xmarsex, nrow=10)
head(select(gss,educ,xmarsex, xmarsex!=="NA"))
head(select(gss,educ,xmarsex))
head(select(gss,educ,xmarsex)200)
head(select(gss,educ,xmarsex),200)
a <- select(gss,educ,xmarsex)
head(a)
head (a, 200, na.rm=1)
head (a, 200, rm.na=1)
?head
complete.cases(a)
head (completecases(a, 200)
)
head (complete.cases(a, 200))
head (complete.cases(a))
na.omit(a)
na.omit(select(gss,educ,xmarsex, na.rm=1))
head(na.omit(select(gss,educ,xmarsex, na.rm=1)),200)
get()
getwd()
binom_sample = rbinom(1000, 10, prob=0.5)
binom_sample = rbinom
binom_sample = rbinom(1000, 10, prob=0.5)
binom_sample
?rbinom
table(binom_sample)
set.seed(2)
binom_sample = rbinom(1000, 10, prob=0.5)
table(binom_sample)
dbinnom(9,1000,.5)
dbinom(9,1000,.5)
dbinom(9,10,.5)
dbinom(9,size=1000,prob=1/2)
dbinom(5,size=1000,prob=1/2)
dbinom(0,size=1000,prob=1/2)
dbinom(0,size=10,prob=1/2)
dbinom(5,size=10,prob=1/2)
binom_prob = dbinom(1000, 10, prob=0.5)
table(binom_prob)
binom_sample = rbinom(1000, 10, prob=0.5)
binom_prob = rbinom(binom_sample, 10, prob=0.5)
table(binom_prob)
binom_prob = dbinom(binom_sample, 10, prob=0.5)
table(binom_prob)
binom_prob
binom_sample
cbin(binom_sample,binom_prob)
cbind(binom_sample,binom_prob)
table(cbind(binom_sample,binom_prob))
table(binom_sample)
sum(dbinom(binom_sample, 10, prob=0.5))
sum(binom_sample)
binom_sample
?power.t.test
power.t.test(30,2,1,.05)
power.t.test(30,2,1,.05,type="two.sided")
power.t.test(30,2,1,.05,type="two.sample")
power.t.test(16,2,4,.05,type="one.sample")
power.t.test(16,2,4,.05,type="two.sample")
power.t.test(16,2,4,.05,type="two.sample", alternative="one.sided")
power.t.test(16,2,4,type="two.sample", alternative="one.sided")
power.t.test(16,2,1,type="two.sample", alternative="one.sided")
power.t.test(n=16,delta=2,sd=4,type="two.sample", alternative="one.sided")
power.t.test(n=16,delta=2,sd=4,type="one.sample", alternative="one.sided")
power.t.test(16,2,4,type="one.sample", alternative="one.sided")
power.t.test(32,2,4,type="one.sample", alternative="one.sided")
power.t.test(32,2,4,.10,type="one.sample", alternative="one.sided")
power.t.test(30,2,4,.10,type="one.sample", alternative="one.sided")
power.t.test(30,2,4,.10,type="one.sample", alternative="two.sided")
power.t.test(20,2,4,.10,type="one.sample", alternative="one.sided")
source.with.encoding('~/GitHub/R/gss.Rdata', encoding='UTF-8')
save(mydata, file = "MyData.Rdata")
load("~/GitHub/MyWork/MyData.Rdata")
mydata
View(mydata)
sum(mydata)
hist(mydata)
? range
?t
cars <- c(1, 3, 6, 4, 9)
trucks <- c(2, 5, 4, 5, 12)
suvs <- c(4,4,6,6,16)
autos <- c(cars, trucks, suvs)
autos
ls
pf
?p
?pf
pZ
?pz
?pt
sample (a,100)
a=rnorm(30,12,2)
sample(a,30)
ls
?sample
sample(a,30,replace=1)
sample(a,30,replace=1)
sample(a,30,replace=1)
for x in 1 to 30
x in 1 to 30
table(sample(a,30,replace=1))
rn <- rnorm(1000, 10)
rm
rn
library(boot)
data(crabs)
data(crabs, package="MASS")
crabs
str(crabs)
?spxret
lot(density(a.bootstrap), lwd=3, col="steelblue")
plot(density(a.bootstrap), lwd=3, col="steelblue")
a = c(86, 88, 89, 89, 92, 93, 94, 94, 94, 95, 95, 96, 96, 97, 97, 98, 98, 99, 99, 101, 106, 107, 110, 113, 116, 118)
b = c(89, 90, 92, 93, 93, 96, 99, 99, 99, 102, 103, 104, 105, 106, 106, 107, 108, 108, 110, 110, 112, 114, 116, 116)
diff.observed = mean(b) - mean(a)
for (i in 1 : n) {
# Sample with replacement (bootstrapping is with replacement)
a.bootstrap = sample  (a, length(a), TRUE)
b.bootstrap = sample  (b, length(b), TRUE)
diff.bootstrap[i] = mean(b.bootstrap) - mean(a.bootstrap)
}
n = 1000
for (i in 1 : n) {
# Sample with replacement (bootstrapping is with replacement)
a.bootstrap = sample  (a, length(a), TRUE)
b.bootstrap = sample  (b, length(b), TRUE)
diff.bootstrap[i] = mean(b.bootstrap) - mean(a.bootstrap)
}
alpha = 0.05
diff.bootstrap = NULL
for (i in 1 : n) {
# Sample with replacement (bootstrapping is with replacement)
a.bootstrap = sample  (a, length(a), TRUE)
b.bootstrap = sample  (b, length(b), TRUE)
diff.bootstrap[i] = mean(b.bootstrap) - mean(a.bootstrap)
}
plot(density(a.bootstrap), lwd=3, col="steelblue")
abline(v=sum(a), lwd=3, col='gold')
sum(a)
mean(a)
abline(v=mean(a), lwd=3, col='gold')
abline
?aabline
?abline
simpleboot<-function(x,stat,reps=1000) {
cat("Bootstrapping can go wrong!\n")
cat("This simple function will not show you warning messages.\n")
cat("Check results closely and be prepared to consult a statistician.\n")
if(stat=="max" | stat=="min") { warning("Bootstrap is likely to fail for minima and maxima") }
require(boot)
eval(parse(text=eval(substitute(paste("p.func<-function(x,i) ",stat,"(x[i])",sep=""),list(stat=stat)))))
myboots<-boot(x,statistic=p.func,R=reps,stype="i")
hist(bmed$t,breaks=25,main="EDF from bootstrap",xlab=stat)
suppressWarnings(return(list(replicates=reps,point.estimate=myboots$t0,normal.ci=c(boot.ci(myboots)$normal[2],boot.ci(myboots)$normal[3]),
percent.ci=c(boot.ci(myboots)$percent[4],boot.ci(myboots)$percent[5]),
bca.ci=c(boot.ci(myboots)$bca[4],boot.ci(myboots)$bca[5]))))
}
# example:
mydata<-rchisq(25,df=3)
simpleboot(mydata,"median")
library(boot) #load the package
# Now we need the function we would like to estimate
# In our case the beta:
betfun = function(data,b,formula){
# b is the random indexes for the bootstrap sample
d = data[b,]
return(lm(d[,1]~d[,2], data = d)$coef[2])
# thats for the beta coefficient
}
# now you can bootstrap:
bootbet = boot(data="your data here", statistic=betfun, R=5000)
# R is how many bootstrap samples
names(bootbet)
plot(bootbet)
hist(bootbet$t, breaks = 100)
library(boot)
library(boot) #load the package
# Now we need the function we would like to estimate
# In our case the beta:
betfun = function(data,b,formula){
# b is the random indexes for the bootstrap sample
d = data[b,]
return(lm(d[,1]~d[,2], data = d)$coef[2])
# thats for the beta coefficient
}
# now you can bootstrap:
bootbet = boot(data="your data here", statistic=betfun, R=5000)
# R is how many bootstrap samples
names(bootbet)
plot(bootbet)
hist(bootbet$t, breaks = 100)
library(boot) #load the package
# Now we need the function we would like to estimate
# In our case the beta:
betfun = function(data,b,formula){
# b is the random indexes for the bootstrap sample
d = data[b,]
return(lm(d[,1]~d[,2], data = d)$coef[2])
# thats for the beta coefficient
}
# now you can bootstrap:
bootbet = boot(data="your data here", statistic=betfun, R=5000)
# R is how many bootstrap samples
names(bootbet)
plot(bootbet)
hist(bootbet$t, breaks = 100)
library(boot) #load the package
# Now we need the function we would like to estimate
# In our case the beta:
betfun = function(data,b,formula){
# b is the random indexes for the bootstrap sample
d = data[b,]
return(lm(d[,1]~d[,2], data = d)$coef[2])
# thats for the beta coefficient
}
# now you can bootstrap:
bootbet = boot(data=mtcars, statistic=betfun, R=5000)
names(bootbet)
plot(bootbet)
hist(bootbet$t, breaks = 100)
bootbet
summary(betboot)
summary(bootbet)
zoombot = boot.array(bootbet, indices = T)
dim(zoombot)
hist(zoombot[1,], breaks = 100)
# this is the frequency of each index, [1,] for the first
#bootstrap run
> boot.huber <- function(data, indices, maxit=20){
+ data <- data[indices,] # select obs. in bootstrap sample
+ mod <- rlm(prestige ~ income + education, data=data, maxit=maxit)
+ coefficients(mod) # return coefficient vector
+ }
boot.huber <- function(data, indices, maxit=20){
data <- data[indices,] # select obs. in bootstrap sample
mod <- rlm(prestige ~ income + education, data=data, maxit=maxit)
coefficients(mod) # return coefficient vector
}
> library(boot)system.time(duncan.boot <- boot(Duncan, boot.huber, 1999, maxit=100))
[1] 86.58 0.30 87.01 NA NA
duncan.boot
library(boot)
system.time(duncan.boot <- boot(Duncan, boot.huber, 1999, maxit=100))
system.time(duncan.boot <- boot(Duncan, boot.huber, 1999, maxit=100))
Duncan
duncan
data(duncan)
data(Duncan)
t.test(a~b)
?t.test
t.test(a~b,paried=0)
t.test(a,b,paried=0)
t.test(a.bootstrap,b.bootstrap,paried=0)
data(sleep)
str(sleep)
tapply(extra, group, mean)
attach(sleep)
tapply(extra, group, mean)
tapply(extra, group, sd)
tapply(extra, group, length)
t.test(extra~group)
power.t.test(n=10, delta=(2.33-.75), sd=1.9, sig.level=.05,type="two.sample", alternative="two.sided")
R = 999
alpha = numeric(R)
for (i in 1:R) {
group1 = rnorm(10, mean=.75, sd=1.9)
group2 = rnorm(10, mean=2.33, sd=1.9)
alpha[i] = t.test(group1,group2)$p.value
}
alpha
mean(alpha)
mean(alpha<.05)
rm(alpha,group1,group2,i,R)
R= 999; scores = extra; t.values = numeric(R)
for (i in 1:R) {
index = sample(1:20, size=10, replace=F)
group1 = scores[index]
group2 = scores[-index]
t.values[i] = t.test(group1,group2)$statistic
}
t.values = abs(t.values)
mean(t.values<=1.8608)
summary(t.values)
for (i in 1:R) {
index = sample(1:20, size=10, replace=F)
group1 = scores[index]
group2 = scores[-index]
t.values[i] = t.test(group1,group2)$statistic
}
mean(t.values<=1.8608)
with(sleep, t.test(extra~group)$statistic)
extra~group
summary(extra~group)
tapply(extra, group, mean)
boxplot(tapply(extra, group, mean),group1,group2)
boxplot(tapply(extra, group, mean),group1,group2)
boxplot(tapply(extra, 1, mean),group1,group2)
boxplot(extra,group1,group2)
boxplot(extra,group1,group2)
dotplot(group1)
dotchart(group1)
dotchart(group1,group2)
dotchart(t.values)
abline(v=t.ref,lwd=3, col='gold')
t.ref = with(sleep, t.test(extra~group)$statistic)
abline(v=t.ref,lwd=3, col='gold')
?dotchart
dotchart(VADeaths, main = "Death Rates in Virginia - 1940")
op <- par(xaxs = "i")  # 0 -- 100%
dotchart(t(VADeaths), xlim = c(0,100),
main = "Death Rates in Virginia - 1940")
par(op)
op
?par
?sleep
boot.ci(group1)
library(boot)
boot.ci(group1)
boot.ci(t.values)
rats = c(10, 27,30, 40, 46, 51, 52, 104, 146)
mean(rats)
sd(rats)/3
for (i in 1:1000) {
rats.bootstrap = sample(rats, size=9, replace=T)
}
rats.bootstrap
for (i in 1:1000) {
rats.bootstrap[i] = sample(rats, size=9, replace=T)
}
wrnings
warnings
warnings()
rats.bootstrap
mean(rats.bootstrap)
mean(rats)
hist(rats)
hist(rats.bootstrap)
for (i in 1:1000) {
rats.bootstrap[i] = sample(rats, size=9, replace=T)t.values[i] = t.test(group1,group2)$statistic
}
for (i in 1:1000) {
rats.bootstrap[i] = sample(rats, size=9, replace=T)t.values[i] = t.test(group1,group2)$statistic
}
for (i in 1:1000) {
rats.bootstrap[i] = sample(rats, size=9, replace=T);t.values[i] = mean(rats.bootstrap[i])
}
t.values
hist(t.value)
hist(t.values)
mean(rats.bootstrap[991])
rats.bootstrap[991]
rats.bootstrap[991,0]
rats.bootstrap[991]
rats.bootstrap[1]
rats.bootstrap[1,9]
rats.bootstrap[1:9]
for (i in 1:1000) {
rats.bootstrap[i] = mean(sample(rats, size=9, replace=T))}
rats.bootstrap
hist(rats.bootstrap)
for (i in 1:1000) {
rats.bootstrap[i] = mean(sample(rats, size=9, replace=T))}
tdist(.05)
td(.05)
?tdist
?rnorm
?tnorm
rt(.05)
?rt
abline(v=qt(0.975,df=len(rats)-1)*sd(rats)/sqrt(len(rats)),lwd=3, col='red')
LEn
Len(rats)
abline(v=qt(0.975,df=length(rats)-1)*sd(rats)/sqrt(length(rats)),lwd=3, col='red')
abline(v=qt(0.025,df=length(rats)-1)*sd(rats)/sqrt(length(rats)),lwd=3, col='red')
abline(v=qt(0.025,df=length(rats)-1)*sd(rats)/sqrt(length(rats)),lwd=3, col='red')
qt(0.975,df=length(rats)-1)*sd(rats)/sqrt(length(rats)
)
qt(0.975,df=length(rats)-1)*sd(rats)/sqrt(length(rats))
qt(0.025,df=length(rats)-1)*sd(rats)/sqrt(length(rats))
alpha
alpha = .05
qt(1-alpha/2,df=length(rats)-1)*sd(rats)/sqrt(length(rats))
qt(alpha/2,df=length(rats)-1)*sd(rats)/sqrt(length(rats))
length(rates)
length(rats)
sd(rats)
mean(rats)+qt(alpha/2,df=length(rats)-1)*sd(rats)/sqrt(length(rats))
mean(rats)+qt(1-alpha/2,df=length(rats)-1)*sd(rats)/sqrt(length(rats))
sd(rats)/sqrt(length(rats))
load("~/GitHub/MyWork/MyData.Rdata")
install.packages("Rcmdr")
install.packages("scatterplot3d")
install.packages("hexbin")
require("lattice")
mtcars$cyl
?splom
super.sym <- trellis.par.get("superpose.symbol")
install.packages("gcluse")
install.packages("gclus")
?scatterplot
?scatterplot
?scatterplot()
if (!require("Rcmdr")) {
install.packages("Rcmdr")
}
if (!require("scatterplot3d")) {
install.packages("scatterplot3d")
}
if (!require("hexbin")) {
install.packages("hexbin")
}
if (!require("lattice")) {
install.packages("lattice")
}
if (!require("gclus")) {
install.packages("gclus")
}
attach(mtcars)
scatter3d(wt, disp, mpg)
Spinning 3D Scatterplots
plot3d(wt, disp, mpg, col="red", size=3)
q()
read.csv("MyData.csv")  # read csv file
getwd()
setwd("C:/Users/bryan_000/Documents/GitHub/MyWork")
read.csv("MyData.csv")  # read csv file
load(mydata, file = "MyData.Rdata")
?load
load(file = "MyData.Rdata")
mydata
str(mydata)
url <- "http://statcounter.com/p7447608/csv/download_log_file?ufrom=1323783441&uto=1323860282"
download.file(url, destfile = "log.csv" )
csv.data <- read.csv("log.csv" )
head(csv.data)
MyData <- read.csv("log.csv" )r
MyData <- read.csv("log.csv" )
Mydata
MyData
read.table("y_test.txt")
View(csv.data)
read.table("log.csv")
read.table("MyData.csv")
