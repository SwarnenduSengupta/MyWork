setwd("~/GitHub/MyWork")
source('~/GitHub/MyWork/StdOpen.R')
source('~/GitHub/MyWork/StdOpen.R')
install.packages("Rtools")
find_rtools()
find_rtools()
find_rtools()
##Set seed for reproducibility
set.seed(2345)
##Set data directory
##Use my standard openning including call function
if (Sys.info()["sysname"]=="Linux"){
datadir=('/home/bryan/GitHub/Data/')
}else{
datadir=('E:/Data/')
}
source('C:/Users/bryan_000/Documents/GitHub/MyWork/StdOpen.R')
source('C:/Users/bryan/Documents/GitHub/MyWork/StdOpen.R')
---
require(devtools)
install_github('rCharts', 'ramnathv')
library(rCharts)
## Example 1 Facetted Scatterplot
names(iris) = gsub("\\.", "", names(iris))
rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
## Example 2 Facetted Barplot
hair_eye = as.data.frame(HairEyeColor)
rPlot(Freq ~ Hair | Eye, color = 'Eye', data = hair_eye, type = 'bar')
r1 <- rPlot(mpg ~ wt | am + vs, data = mtcars, type = "point", color = "gear")
r1$print("chart1")
library(ggplot2)
r1 <- rPlot(mpg ~ wt | am + vs, data = mtcars, type = "point", color = "gear")
r1$print("chart1")
r1
call("kernlab")
### finding optimal value of a tuning parameter
sigDist <- sigest(y ~ ., data = dataTrain, frac = 1)
### creating a grid of two tuning parameters, .sigma comes from the earlier line. we are trying to find best value of .C
svmTuneGrid <- data.frame(.sigma = sigDist[1], .C = 2^(-2:7))
##My standard opening
source('C:/Users/bryan/Documents/GitHub/MyWork/StdOpen.R')
##Set destination file for download
spamfile <-paste(datadir,"spamdata.csv",sep = "")
spamnames <-paste(datadir,"spamnames.csv",sep = "")
#Check for the File. If not there, download the data
if (!file.exists(spamfile)) {
file.url <- 'http://thinktostart.com/data/data.csv'
download.file(file.url, spamfile)
}
if (!file.exists(spamnames)) {
file.url <- 'http://thinktostart.com/data/names.csv'
download.file(file.url, spamnames)
}
#Load the two files into R:
spamdataset <- read.csv(spamfile,header=FALSE,sep=";")
spamnames <- read.csv(spamnames,header=FALSE,sep=";")
#Set the names of the spamdataset dataframe:
names(spamdataset) <- sapply((1:nrow(spamnames)),function(i) toString(spamnames[i,1]))
#make column y a factor variable for binary classification (spam or non-spam)
spamdataset$y <- as.factor(spamdataset$y)
#get a sample of 1000 rows
sample <- spamdataset[sample(nrow(spamdataset), 1000),]
#Split the data in dataTrain and dataTest
trainIndex <- createDataPartition(sample$y, p = .8, list = FALSE, times = 1)
dataTrain <- sample[ trainIndex,]
dataTest  <- sample[-trainIndex,]
call("kernlab")
### finding optimal value of a tuning parameter
sigDist <- sigest(y ~ ., data = dataTrain, frac = 1)
### creating a grid of two tuning parameters, .sigma comes from the earlier line. we are trying to find best value of .C
svmTuneGrid <- data.frame(.sigma = sigDist[1], .C = 2^(-2:7))
#Create the SVM model:
x <- train(y ~ .,
data = dataTrain,
method = "svmRadial",
preProc = c("center", "scale"),
tuneGrid = svmTuneGrid,
trControl = trainControl(method = "repeatedcv", repeats = 5,
classProbs =  TRUE))
