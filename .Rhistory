#Fit a trend line
abline(lm(coredata(testseries) ~ index(testseries)),col="Red")
fcastdata<-window(trainseries,start=20050301)
fit1 <- meanf(fcastdata, h=441)
fit2 <- naive(fcastdata, h=441)
fit3 <- snaive(fcastdata, h=441)
plot(meanfcast)
plot(naivefcast)
plot(snaivefcast)
plot(fit1, plot.conf=FALSE,main="Forecasts for daily ridership")
lines(fit2$mean,col=2)
lines(fit3$mean,col=3)
legend("topleft",lty=1,col=c(4,2,3),
legend=c("Mean method","Naive method","Seasonal naive method"))
logfcast(log(trainseries))
logfcast<-log(trainseries)
plot.ts(naive(logfcast,441))
plot(naive(logfcast,441))
mean2 <-meanf(logfcast,441)
plot(mean2)
summary(mean2)
?auto.arima
auto.arima(trainseries,stepwise=TRUE)
arimatrainseries <- arima(trainseries, order=c(3,0,1), seasonal=c(1,0,0))
arimafcast <-forecast.Arima(arimatrainseries,441)
plot(arimafcast)
res <residuals(arimafcast)
tsdisplay(res)
Box.test(res, lag=7, type="Ljung")
errordata2 <- window(testseries,start=20050315)
accuracy(fit6, errordata2)
accuracy(fit5, errordata2)
accuracy(fit4, errordata2)
lm(coredata(trainseries)~index(trainseries))
fit<-lm(coredata(trainseries)~index(trainseries))
prefict(fit,testseries)
predict(fit,testseries)
plot(predict(fit,testseries))
plot(coredata(trainseries)~index(trainseries))
complete<-rbind(trainseries,testseries)
complete
head(complete)
head(complete)
exptimeseries3 <- HoltWinters(complete)
expfcast3 <-forecast.HoltWinters(exptimeseries3,189)
exptimeseries3 <- HoltWinters(complete)
complete(rbind(train,test))
complete<-rbind(train,test))
complete<-rbind(train,test)
timeseries <- ts(complete, frequency=63, start=c(20050315))
exptimeseries3 <- HoltWinters(timeseries)
expfcast3 <-forecast.HoltWinters(exptimeseries3,189)
plot(expfcast3)
complete<-rbind(train,test)
timeseries <- ts(complete, frequency=63, start=c(20050301))
exptimeseries3 <- HoltWinters(timeseries)
expfcast3 <-forecast.HoltWinters(exptimeseries3,189)
plot(expfcast3)
fit7 <- forecast.HoltWinters(exptimeseries3,189)
errordata3 <- window(timeseries,start=20050315)
accuracy(fit7, errordata3)
errordata3 <- window(timeseries,start=20050321)
accuracy(fit7, errordata3)
errordata3 <- window(timeseries,start=20050322)
accuracy(fit7, errordata3)
errordata3 <- window(timeseries,start=20050320)
accuracy(fit7, errordata3)
errordata3 <- window(timeseries,start=20050321)
accuracy(fit7, errordata3)
errordata3 <- window(timeseries,start=20050322)
accuracy(fit7, errordata3)
errordata3 <- window(timeseries,start=20050321)
index(timeseriec)
index(timeseries)
index(testseries)
errordata3 <- window(timeseries,start=20050323)
accuracy(fit7, errordata3)
errordata3 <- window(timeseries,start=20050322)
fcastdata3
index(fcastdata3)
index(fcastdata2)
index(fcastdata4)
index(errordata2)
index(timeseries)
index(exptimeseries3)
exptimeseries3
expfcast3 <-forecast.HoltWinters(exptimeseries3,189)
expfcast3
plot(expfcast3)
errordata3 <- window(timeseries,start=20050322)
errordata3 <- window(timeseries,start=20050323)
errordata3 <- window(timeseries,start=20050322)
errordata3 <- window(timeseries,start=20050321)
index(errordata3)
index(timeseries)
index(testseries)
index(trainseries)
index(testseries)
trainseries <- ts(train, frequency=63, start=c(20050301), end=c(20050314))
index(trainsereis)
index(trainseries)
trainseries <- ts(train, frequency=63, start=c(20050301), end=c(20050315))
index(trainseries)
?ts
trainseries <- ts(train, frequency=63, start=c(1), end=c(14))
index(trainseries)
trainseries <- ts(train, frequency=63, start=c(1))
trainseries <- ts(train, frequency=63, start=c(1))
index(trainseries)
test <- read.csv("D:/Data/bicup2006test.csv")
#Convert to a timeseries using 63 periods (15 minutes) per day
testseries <- ts(test, frequency=63, start=c(15))
summary(testseries)
index(testseries)
par(mfrow=c(1,2))
plot(coredata(trainseries) ~ index(trainseries),type="l",ylab="Number",xlab="Date/Time",main="Training Data")
#Fit a trend line
abline(lm(coredata(trainseries) ~ index(trainseries)),col="Red")
plot(coredata(testseries) ~ index(testseries),type="l",ylab="Number",xlab="Date/Time",main="Testing Data")
#Fit a trend line
abline(lm(coredata(testseries) ~ index(testseries)),col="Red")
trainseriescomponents <- decompose(trainseries)
plot(trainseriescomponents)
meanfcast <- meanf(trainseries,441)
naivefcast <- naive(trainseries,441)
snaivefcast <- snaive(trainseries,441)
fcastdata<-window(trainseries,start=1)
fit1 <- meanf(fcastdata, h=441)
fit2 <- naive(fcastdata, h=441)
fit3 <- snaive(fcastdata, h=441)
par(mfrow=c(2,2))
plot(meanfcast)
plot(naivefcast)
plot(snaivefcast)
plot(fit1, plot.conf=FALSE,main="Comparisions")
lines(fit2$mean,col=2)
lines(fit3$mean,col=3)
legend("topleft",lty=1,col=c(4,2,3),
legend=c("Mean method","Naive method","Seasonal naive method"))
errordata <- window(testseries,start=15)
accuracy(fit1, errordata)
accuracy(fit2, errordata)
accuracy(fit3, errordata)
exptimeseries <- HoltWinters(trainseries, gamma=FALSE)
expfcast <-forecast.HoltWinters(exptimeseries,441)
plot(expfcast)
acf(expfcast$residuals, lag.max=7)
Box.test(expfcast$residuals, lag=7, type="Ljung-Box")
exptimeseries2 <- HoltWinters(trainseries)
expfcast2 <-forecast.HoltWinters(exptimeseries2,441)
plot(expfcast2)
acf(expfcast2$residuals, lag.max=7)
Box.test(expfcast2$residuals, lag=7, type="Ljung-Box")
arimatrainseries <- arima(trainseries, order=c(3,0,1), seasonal=c(1,0,0))
arimafcast <-forecast.Arima(arimatrainseries,441)
arimatrainseries <- arima(trainseries, order=c(3,0,1), seasonal=c(1,0,0))
arimafcast <-forecast.Arima(arimatrainseries,441)
plot(arimafcast)
fcastdata3<-window(trainseries,start=1)
fit4 <- forecast.HoltWinters(exptimeseries,441)
fit5 <- forecast.HoltWinters(exptimeseries2,441)
fit6 <- forecast.Arima(arimatrainseries,441)
plot(fit4, plot.conf=FALSE,main="Forecasts for daily ridership")
lines(fit5$mean,col=2)
lines(fit6$mean,col=3)
legend("topleft",lty=1,col=c(4,2,3),legend=c("Exp Smoothing","Holt Winters","ARIMA"))
errordata2 <- window(testseries,start=15)
accuracy(fit4, errordata2)
accuracy(fit5, errordata2)
accuracy(fit6, errordata2)
complete<-rbind(train,test)
timeseries <- ts(complete, frequency=63, start=c(1))
exptimeseries3 <- HoltWinters(timeseries)
expfcast3 <-forecast.HoltWinters(exptimeseries3,189)
plot(expfcast3)
fit7 <- forecast.HoltWinters(exptimeseries3,189)
errordata3 <- window(timeseries,start=22)
errordata3 <- window(timeseries,start=1)
accuracy(fit7, errordata3)
errordata3 <- window(timeseries,start=15)
accuracy(fit7, errordata3)
complete<-rbind(train,test)
timeseries <- ts(complete, frequency=63, start=c(1))
exptimeseries3 <- HoltWinters(timeseries)
expfcast3 <-forecast.HoltWinters(exptimeseries3,189)
plot(expfcast3)
par(mfrow=c(1,1))
complete<-rbind(train,test)
timeseries <- ts(complete, frequency=63, start=c(1))
exptimeseries3 <- HoltWinters(timeseries)
expfcast3 <-forecast.HoltWinters(exptimeseries3,189)
plot(expfcast3)
expfcast2
expfcast3
expfcast3$mean
plot(expfcast3$mean)
plot(expfcast3$mean, main="Forecasted Ridership 0630 March 22 to 2200 March 24")
plot(expfcast3$mean, main="Forecasted Ridership 0630 March 22 to 2200 March 24", xlab="Day/Time", ylab="Riders")
source('~/.active-rstudio-document', echo=TRUE)
library('ggplot2')
d <- read.table('abalone.data.txt.gz',header=FALSE,sep=',',
stringsAsFactors=TRUE)
# add the column names
colnames(d) <- c('Sex', 'Length', 'Diameter', 'Height', 'WholeWeight',
'ShuckedWeight', 'VisceraWeight', 'ShellWeight', 'Rings')
dim(d)
summary(d)
set.seed(3523)
xTrain <- runif(1000)
bounds <- quantile(xTrain,probs=c(0.01,0.99))
xTest <- runif(1000)
mean(xTest)
xTestWins <- pmax(pmin(xTest,bounds[2]),bounds[1])
mean(xTestWins)
library(ggplot2)
set.seed(5292)
xTrain <- rgamma(10000,shape=1)
ggplot() + geom_density(aes(x=xTrain)) +
ggtitle('gamma distribution')
cdf <- ecdf(xTrain)
xTest <- rgamma(10000,shape=1)
ggplot() + geom_density(aes(x=cdf(xTest))) +
ggtitle('gamma distribution (converted to near uniform by empirical cdf')
ggplot() + geom_density(aes(x=qnorm(cdf(xTest)))) +
ggtitle('gamma distribution (converted to near normal by empirical cdf and qnorm')
set.seed(5292)
# build a multi-modal variable
# x is a mixture of continuous variable and an unrelated discrete variable
x <- rnorm(1000) + sample(c(-5,0,5),size=1000,replace=TRUE)
ggplot() + geom_density(aes(x=x)) +
ggtitle('a multi-modal variable')
# get cut points
library(quantmod)
dens <- density(x)
breaks <- dens$x[findPeaks(-dens$y)]
print(breaks)
# get the discrete part of the variable
xD <- cut(x,c(-Inf,breaks,Inf))
# get the continuous portion
library(plyr)
d <- data.frame(x=x,xD=xD,xM=NA,xC=NA)
dS <- ddply(d,'xD',summarize,
med=median(x))
print(dS)
for(v in dS$xD) {
d[d$xD==v,'xM'] <- dS[dS$xD==v,'med']
}
d$xC <- d$x-d$xM
print(head(d))
ggplot() +
geom_histogram(aes(x=d$xM),binwidth=1) +
ggtitle("recovered discrete component of the variable x")
ggplot() +
geom_density(aes(x=d$xC)) +
ggtitle("recovered continuous portion of the variable x")
ggplot() +
geom_density(data=d,aes(x=x,color=xD),trim=TRUE) +
geom_vline(data=dS,aes(xintercept=med,color=xD)) +
ggtitle("the original variable x, grouped by recovered discrete label")
# have now "unstirred the mixture" that x was
# now could use xD,xC as variables or even the interaction xD*xC to model
paste0(installed.packages()[,"Package"], "-", installed.packages()[,"Version"])
##Clear the environment
rm(list=ls())
##Turn off scientific notations for numbers
options(scipen = 999)
##Set locale
Sys.setlocale("LC_ALL", "English")
##Set seed for reproducibility
set.seed(2345)
DF<- read.csv("D:/Data/traintitanic.csv")
DF2<-read.csv("D:/Data/week5-HW-data.csv")
summary(DF)
View(DF)
round(cor(DF[,1:4]), 2)
##Clear the environment
rm(list=ls())
##Turn off scientific notations for numbers
options(scipen = 999)
##Set locale
Sys.setlocale("LC_ALL", "English")
##Set seed for reproducibility
set.seed(2345)
DF<- read.csv("D:/Data/traintitanic.csv")
summary(DF)
pc <- princomp(DF[,1:4], cor=TRUE, scores=TRUE)
pc <- princomp(DF[,6:8], cor=TRUE, scores=TRUE)
pc <- princomp(DF[,6:7], cor=TRUE, scores=TRUE)
str(DF)
pc <- princomp(DF[,1:3], cor=TRUE, scores=TRUE)
pc
summary(PC)
summary(pc)
##Clear the environment
rm(list=ls())
##Turn off scientific notations for numbers
options(scipen = 999)
##Set locale
Sys.setlocale("LC_ALL", "English")
##Set seed for reproducibility
set.seed(2345)
df<- read.csv("D:/Data/traintitanic.csv")
summary(df)
#Run PCA using correlation matrix
pc <- princomp(df[,2:3], cor=TRUE, scores=TRUE)
summary(pc)
pc <- princomp(df[,7:8], cor=TRUE, scores=TRUE)
summary(pc)
pc <- princomp(df[,6:8], cor=TRUE, scores=TRUE)
summary(pc)
?prrincomp
?princomp
pc <- princomp(df[,6:8], cor=TRUE, scores=TRUE, na.action=omit)
pc <- princomp(df[,6:8], cor=TRUE, scores=TRUE, na.action=na.omit)
df[,6]
pc <- princomp(~., data=df, cor=TRUE, scores=TRUE, na.action=na.omit)
pc <- princomp(~Pclass+Age, data=df, cor=TRUE, scores=TRUE, na.action=na.omit)
summary(pc)
pc <- princomp(~Pclass+Age+SibSp+Parch, data=df, cor=TRUE, scores=TRUE, na.action=na.omit)
summary(pc)
pc <- princomp(~Pclass+Age+SibSp+Parch+Fare, data=df, cor=TRUE, scores=TRUE, na.action=na.omit)
summary(pc)
##Plot it
plot(pc,type="l")
##First 2 components plotted
biplot(pc)
cl <- kmeans(~Age+SibSp+Parch+Fare, data=df,3)
?kmeans
cl <- kmeans(~Age+SibSp+Parch+Fare,3)
cl <- kmeans(df$Age+DF$SibSp+df$Parch+DF$Fare,3)
cl <- kmeans(df$Age+df$SibSp+df$Parch+df$Fare,3)
di <- dist(df[,7:8], method="euclidean")
tree <- hclust(di, method="ward.D2")
tree
di
plot(tree, xlab="")
library(rattle)
rattler()
rattle()
library(rattle)
rattle()
rm(list=ls())
options(scipen = 999)
Sys.setlocale("LC_ALL", "English")
df<- read.csv("D:/Data/traintitanic.csv")
names(df) <-tolower(names(df))
#Run PCA using correlation matrix
pc <- princomp(~pclass+age+sibsp+parch+fare, data=df, cor=TRUE, scores=TRUE, na.action=na.omit)
summary(pc)
plot(pc,type="l")
biplot(pc)
di <- dist(df[,7:8], method="euclidean")
tree <- hclust(di, method="ward.D2")
plot(tree, xlab="")
cl <- kmeans(df$age+df$sibsp+df$parch+df$fare,3)
cl <- kmeans(df$age+df$sibsp+df$parch+df$fare,3,na.action=na.omit)
?kmeans
#clean names
names(df) <-tolower(names(df))
names(df) <- gsub("\\(","",names(df))
names(df) <- gsub("\\)","",names(df))
names(df) <- gsub("-","",names(df))
names(df) <- gsub(",","",names(df))
#Summary data
summary(df)
names(df) <- gsub("\\.","",names(df))
names(df)
names(df)<- c("passengerid","survived","pclass","na()me","se.x","age","sib.sp",
"parch",       "ticket","fare"        "cabin",,      "embarked"  )
names(df)<- c("passengerid","survived","pclass","na()me","se.x","age","sib.sp",
"parch",       "ticket","fare",        "cabin",      "embarked"  )
names
names(df)
names(df) <-tolower(names(df))
names(df) <- gsub("\\(","",names(df))
names(df) <- gsub("\\)","",names(df))
names(df) <- gsub("-","",names(df))
names(df) <- gsub(",","",names(df))
names(df) <- gsub("\\.","",names(df))
names(df)
pc <- princomp(names(df), data=df, cor=TRUE, scores=TRUE, na.action=na.omit)
d$isTest <- runif(nrow(df))<0.25
df$isTest <- runif(nrow(df))<0.25
df
df$dataLabel <- ifelse(df$isTest,"test data","train data")
df
df$istest <- runif(nrow(df))<0.25
df$datalabel <- ifelse(df$isTest,"test data","train data")
dftrain = df[!df$istest,]
dftest = df[df$istest,]
dftrain
str(dftest)
df$istest <- runif(nrow(df))<0.25
df$datalabel <- ifelse(df$istest,"test data","train data")
dftrain = df[!df$istest,]
dftest = df[df$istest,]
str(dftest)
str(dftrain)
summary(dftest)
pc <- princomp(~pclass+age+sibsp+parch+fare, data=dftest, cor=TRUE, scores=TRUE, na.action=na.omit)
summary(pc)
plot(pc,type="l")
di <- dist(dftest[,7:8], method="euclidean")
di <- dist(dftest[,7:8], method="euclidean")
tree <- hclust(di, method="ward.D2")
plot(tree, xlab="")
cl <- kmeans(dftrain$age+dftrain$sibsp+dftrain$parch+dftrain$fare,3)
plot(dftrain)
nonNAs(df)
apply(df, 2, function(x) length(which(!is.na(x))))
apply(dftrain, 2, function(x) length(which(!is.na(x))))
apply(dftest, 2, function(x) length(which(!is.na(x))))
apply(dftest, 2, function(x) length(which(is.na(x))))
apply(dftest, 2, function(x) length(which(1is.na(x))))
apply(dftest, 2, function(x) length(which(!is.na(x))))
len(df)
length(df)
sum(df)
colSums(is.na(x))
colSums(is.na(df))
colSums(!is.na(df))
colSums(!is.na(df))
colSums(!is.na(dftest))
colSums(!is.na(dftrain))
df2 <-colSums(!is.na(dftest))
df2
colSums(!is.na(df))
df <- na.omit(df)
colSums(!is.na(df))
df$istest <- runif(nrow(df))<0.25
df$datalabel <- ifelse(df$istest,"test data","train data")
dftrain = df[!df$istest,]
dftest = df[df$istest,]
pc <- princomp(~pclass+age+sibsp+parch+fare, data=dftest, cor=TRUE, scores=TRUE)
boxplot(age~survived, data=df)
boxplot(survived~., data=df)
boxplot(survived~age, data=df)
boxplot(survived~age, data=dftrain)
##Clear the environment
rm(list=ls())
##Turn off scientific notations for numbers
options(scipen = 999)
##Set locale
Sys.setlocale("LC_ALL", "English")
##Set seed for reproducibility
set.seed(2345)
df<- read.csv("D:/Data/traintitanic.csv")
#clean names
names(df) <-tolower(names(df))
names(df) <- gsub("\\(","",names(df))
names(df) <- gsub("\\)","",names(df))
names(df) <- gsub("-","",names(df))
names(df) <- gsub(",","",names(df))
names(df) <- gsub("\\.","",names(df))
#count
colSums(!is.na(df))
df <- na.omit(df)
colSums(!is.na(df))
# do the random split (25% held out for test), put the label back into the data frame
df$istest <- runif(nrow(df))<0.25
df$datalabel <- ifelse(df$istest,"test data","train data")
dftrain = df[!df$istest,]
dftest = df[df$istest,]
boxplot(age, data=dftrain)
boxplot(age~survuived, data=dftrain)
plot(dftrain)
dftrain
str(dftrain)
boxplot(age~survived, data=dftrain)
boxplot(sex~survived, data=dftrain)
boxplot(pclass~survived, data=dftrain)
boxplot(pclass~survived, data=dftrain)
hist(age)
hist(age, data=dftrain)
hist(dftrain$age)
dotplot(dftrain$age, xlab="Age")
dotchart(dftrain$age, xlab="Age")
dotchart(dftrain$age, xlab="Age", labels=row.names(dftrain))
dotchart(dftrain$age, xlab="Age")
stripchart(survived~age,
method="stack",
pch=c(1,2,3),
col=c("red","blue","green"),
xlab="Number of Cylinders",
ylab="Miles Per Gallon (MPG)",
main="Miles Per Gallon vs. Number of Cylinders",
offset=0.5)
stripchart(dftrain$survived~dftrain$age,
method="stack",
pch=c(1,2,3),
col=c("red","blue","green"),
xlab="Number of Cylinders",
ylab="Miles Per Gallon (MPG)",
main="Miles Per Gallon vs. Number of Cylinders",
offset=0.5)
stripchart(dftrain$age~dftrain$survived,
method="stack",
pch=c(1,2,3),
col=c("red","blue","green"),
xlab="Number of Cylinders",
ylab="Miles Per Gallon (MPG)",
main="Miles Per Gallon vs. Number of Cylinders",
offset=0.5)
stripchart(dftrain$age~dftrain$survived,method="stack", pch=c(1,2,3), col=c("red","blue","green"), xlab="Age", ylab="Survived", main="Survived vs. Age",offset=0.5)
stripchart(dftrain$age~dftrain$survived,method="stack", pch=c(1,2), col=c("red","blue"), xlab="Age", ylab="Survived", main="Survived vs. Age",offset=0.5)
plot(dftrain)
boxplot(age~survived, data=dftrain)
boxplot(pclass~survived, data=dftrain)
hist(dftrain$age, xlab="Age")
dotchart(dftrain$age, xlab="Age")
stripchart(dftrain$age~dftrain$survived,method="stack", pch=c(1,2), col=c("red","blue"), xlab="Age", ylab="Survived", main="Survived vs. Age",offset=0.5)
hist(dftrain$age, xlab="Age", main="Age Hisotgram")
