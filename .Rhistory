cl <- kmeans(~Age+SibSp+Parch+Fare,3)
cl <- kmeans(df$Age+DF$SibSp+df$Parch+DF$Fare,3)
cl <- kmeans(df$Age+df$SibSp+df$Parch+df$Fare,3)
di <- dist(df[,7:8], method="euclidean")
tree <- hclust(di, method="ward.D2")
tree
di
plot(tree, xlab="")
library(rattle)
rattler()
rattle()
library(rattle)
rattle()
rm(list=ls())
options(scipen = 999)
Sys.setlocale("LC_ALL", "English")
df<- read.csv("D:/Data/traintitanic.csv")
names(df) <-tolower(names(df))
#Run PCA using correlation matrix
pc <- princomp(~pclass+age+sibsp+parch+fare, data=df, cor=TRUE, scores=TRUE, na.action=na.omit)
summary(pc)
plot(pc,type="l")
biplot(pc)
di <- dist(df[,7:8], method="euclidean")
tree <- hclust(di, method="ward.D2")
plot(tree, xlab="")
cl <- kmeans(df$age+df$sibsp+df$parch+df$fare,3)
cl <- kmeans(df$age+df$sibsp+df$parch+df$fare,3,na.action=na.omit)
?kmeans
#clean names
names(df) <-tolower(names(df))
names(df) <- gsub("\\(","",names(df))
names(df) <- gsub("\\)","",names(df))
names(df) <- gsub("-","",names(df))
names(df) <- gsub(",","",names(df))
#Summary data
summary(df)
names(df) <- gsub("\\.","",names(df))
names(df)
names(df)<- c("passengerid","survived","pclass","na()me","se.x","age","sib.sp",
"parch",       "ticket","fare"        "cabin",,      "embarked"  )
names(df)<- c("passengerid","survived","pclass","na()me","se.x","age","sib.sp",
"parch",       "ticket","fare",        "cabin",      "embarked"  )
names
names(df)
names(df) <-tolower(names(df))
names(df) <- gsub("\\(","",names(df))
names(df) <- gsub("\\)","",names(df))
names(df) <- gsub("-","",names(df))
names(df) <- gsub(",","",names(df))
names(df) <- gsub("\\.","",names(df))
names(df)
pc <- princomp(names(df), data=df, cor=TRUE, scores=TRUE, na.action=na.omit)
d$isTest <- runif(nrow(df))<0.25
df$isTest <- runif(nrow(df))<0.25
df
df$dataLabel <- ifelse(df$isTest,"test data","train data")
df
df$istest <- runif(nrow(df))<0.25
df$datalabel <- ifelse(df$isTest,"test data","train data")
dftrain = df[!df$istest,]
dftest = df[df$istest,]
dftrain
str(dftest)
df$istest <- runif(nrow(df))<0.25
df$datalabel <- ifelse(df$istest,"test data","train data")
dftrain = df[!df$istest,]
dftest = df[df$istest,]
str(dftest)
str(dftrain)
summary(dftest)
pc <- princomp(~pclass+age+sibsp+parch+fare, data=dftest, cor=TRUE, scores=TRUE, na.action=na.omit)
summary(pc)
plot(pc,type="l")
di <- dist(dftest[,7:8], method="euclidean")
di <- dist(dftest[,7:8], method="euclidean")
tree <- hclust(di, method="ward.D2")
plot(tree, xlab="")
cl <- kmeans(dftrain$age+dftrain$sibsp+dftrain$parch+dftrain$fare,3)
plot(dftrain)
nonNAs(df)
apply(df, 2, function(x) length(which(!is.na(x))))
apply(dftrain, 2, function(x) length(which(!is.na(x))))
apply(dftest, 2, function(x) length(which(!is.na(x))))
apply(dftest, 2, function(x) length(which(is.na(x))))
apply(dftest, 2, function(x) length(which(1is.na(x))))
apply(dftest, 2, function(x) length(which(!is.na(x))))
len(df)
length(df)
sum(df)
colSums(is.na(x))
colSums(is.na(df))
colSums(!is.na(df))
colSums(!is.na(df))
colSums(!is.na(dftest))
colSums(!is.na(dftrain))
df2 <-colSums(!is.na(dftest))
df2
colSums(!is.na(df))
df <- na.omit(df)
colSums(!is.na(df))
df$istest <- runif(nrow(df))<0.25
df$datalabel <- ifelse(df$istest,"test data","train data")
dftrain = df[!df$istest,]
dftest = df[df$istest,]
pc <- princomp(~pclass+age+sibsp+parch+fare, data=dftest, cor=TRUE, scores=TRUE)
boxplot(age~survived, data=df)
boxplot(survived~., data=df)
boxplot(survived~age, data=df)
boxplot(survived~age, data=dftrain)
##Clear the environment
rm(list=ls())
##Turn off scientific notations for numbers
options(scipen = 999)
##Set locale
Sys.setlocale("LC_ALL", "English")
##Set seed for reproducibility
set.seed(2345)
df<- read.csv("D:/Data/traintitanic.csv")
#clean names
names(df) <-tolower(names(df))
names(df) <- gsub("\\(","",names(df))
names(df) <- gsub("\\)","",names(df))
names(df) <- gsub("-","",names(df))
names(df) <- gsub(",","",names(df))
names(df) <- gsub("\\.","",names(df))
#count
colSums(!is.na(df))
df <- na.omit(df)
colSums(!is.na(df))
# do the random split (25% held out for test), put the label back into the data frame
df$istest <- runif(nrow(df))<0.25
df$datalabel <- ifelse(df$istest,"test data","train data")
dftrain = df[!df$istest,]
dftest = df[df$istest,]
boxplot(age, data=dftrain)
boxplot(age~survuived, data=dftrain)
plot(dftrain)
dftrain
str(dftrain)
boxplot(age~survived, data=dftrain)
boxplot(sex~survived, data=dftrain)
boxplot(pclass~survived, data=dftrain)
boxplot(pclass~survived, data=dftrain)
hist(age)
hist(age, data=dftrain)
hist(dftrain$age)
dotplot(dftrain$age, xlab="Age")
dotchart(dftrain$age, xlab="Age")
dotchart(dftrain$age, xlab="Age", labels=row.names(dftrain))
dotchart(dftrain$age, xlab="Age")
stripchart(survived~age,
method="stack",
pch=c(1,2,3),
col=c("red","blue","green"),
xlab="Number of Cylinders",
ylab="Miles Per Gallon (MPG)",
main="Miles Per Gallon vs. Number of Cylinders",
offset=0.5)
stripchart(dftrain$survived~dftrain$age,
method="stack",
pch=c(1,2,3),
col=c("red","blue","green"),
xlab="Number of Cylinders",
ylab="Miles Per Gallon (MPG)",
main="Miles Per Gallon vs. Number of Cylinders",
offset=0.5)
stripchart(dftrain$age~dftrain$survived,
method="stack",
pch=c(1,2,3),
col=c("red","blue","green"),
xlab="Number of Cylinders",
ylab="Miles Per Gallon (MPG)",
main="Miles Per Gallon vs. Number of Cylinders",
offset=0.5)
stripchart(dftrain$age~dftrain$survived,method="stack", pch=c(1,2,3), col=c("red","blue","green"), xlab="Age", ylab="Survived", main="Survived vs. Age",offset=0.5)
stripchart(dftrain$age~dftrain$survived,method="stack", pch=c(1,2), col=c("red","blue"), xlab="Age", ylab="Survived", main="Survived vs. Age",offset=0.5)
plot(dftrain)
boxplot(age~survived, data=dftrain)
boxplot(pclass~survived, data=dftrain)
hist(dftrain$age, xlab="Age")
dotchart(dftrain$age, xlab="Age")
stripchart(dftrain$age~dftrain$survived,method="stack", pch=c(1,2), col=c("red","blue"), xlab="Age", ylab="Survived", main="Survived vs. Age",offset=0.5)
hist(dftrain$age, xlab="Age", main="Age Hisotgram")
library(rggobi)
source("http://www.ggobi.org/beta/install.r")
source("http://www.ggobi.org/beta/install.r")
install.packages("rggobi", repos="http://www.ggobi.org/r")
source("http://www.ggobi.org/downloads/install.r")
#install.packages("rgl")
rm(list=ls())
# Load the libraries
library(rgl)
library(Hmisc)
library(nFactors)
library(FactoMineR)
library(Rcmdr)
library(vcd)
# Set the seed for reproducibility
set.seed(1234)
# Load the data
df <-read.csv("d:/data/1.csv")
# clean the data names and data
names(df)<-tolower(names(df))
names(df) <- gsub("\\(","",names(df))
names(df) <- gsub("\\)","",names(df))
names(df) <- gsub("-","",names(df))
names(df) <- gsub(",","",names(df))
names(df) <- gsub("\\.","",names(df))
# Make and recode dummy variables
df$gasfueldummy <-as.numeric(df$fueltype)
df$gasfueldummy[df$gasfueldummy == 1] <- 0
df$gasfueldummy[df$gasfueldummy == 2] <- 1
df$maledummy<-as.numeric(df$gender)
df$maledummy[df$maledummy == 1] <- 0
df$maledummy[df$maledummy == 2] <- 1
df$marrieddummy<-as.numeric(df$married)
df$marrieddummy[df$marrieddummy == 2] <- 0
# do the random split (25% held out for test), put the label back into the data frame
df$istest <- runif(nrow(df))<0.25
df$datalabel <- ifelse(df$istest,"test data","train data")
dftrain = df[!df$istest,]
dftest = df[df$istest,]
# remove original columns for the dummies, istest, datatlabels, and policy number
drops <- c("gender","married","fueltype","policynumber","datalabel","istest")
dftrain<-dftrain[,!(names(dftrain) %in% drops)]
dftest<-dftest[,!(names(dftest) %in% drops)]
# attach for working
attach(dftrain)
# Explore the data
str(dftrain)
summary(dftrain)
#fIVE NUMBER SUMMARIES
fivenum(losses, na.rm = TRUE)
fivenum(age, na.rm = TRUE)
fivenum(vehicleage, na.rm = TRUE)
fivenum(yearsofdrivingexperience, na.rm = TRUE)
fivenum(numberofvehicles, na.rm = TRUE)
# Apply to all columns
sapply(dftrain, mean, na.rm=TRUE)
sapply(dftrain, sd, na.rm=TRUE)
sapply(dftrain, fivenum, na.rm=TRUE)
# aggregate group by
aggregate(dftrain, by=list(marrieddummy,gasfueldummy),FUN=mean, na.rm=TRUE)
aggregate(dftrain, by=list(marrieddummy,gasfueldummy),FUN=sd, na.rm=TRUE)
aggregate(dftrain, by=list(marrieddummy,gasfueldummy),FUN=fivenum, na.rm=TRUE)
# Tables
table(age)
table(vehicleage)
table(yearsofdrivingexperience)
table(numberofvehicles)
table(gasfueldummy)
table(maledummy)
table(marrieddummy)
# aggregate group by
aggregate(dftrain, by=list(marrieddummy,gasfueldummy),FUN=mean, na.rm=TRUE)
# REQUIRES Hmisc package
describe(dftrain)
# Pricipal Components Analysis
# princomp( ) function produces an unrotated principal component analysis.
fit <- princomp(dftrain, cor=TRUE)
summary(fit) # print variance accounted for
loadings(fit) # pc loadings
plot(fit,type="lines") # scree plot
fit$scores # the principal components
biplot(fit)
# REQUIRES the FactoMiner package
result <- PCA(dftrain) # graphs generated automatically
# Maximum Likelihood Factor Analysis
# entering raw data and extracting 3 factors,
# with varimax rotation
fit <- factanal(dftrain, 3, rotation="varimax")
print(fit, digits=2, cutoff=.3, sort=TRUE)
# plot factor 1 by factor 2
load <- fit$loadings[,1:2]
plot(load,type="n") # set up plot
text(load,labels=names(dftrain),cex=.7) # add variable names
# Determine Number of Factors to Extract
# REQUIRES nfactors package
ev <- eigen(cor(dftrain)) # get eigenvalues
ap <- parallel(subject=nrow(dftrain),var=ncol(dftrain),rep=100,cent=.05)
nS <- nScree(x=ev$values, aparallel=ap$eigen$qevpea)
plotnScree(nS)
## Correlation matrix (and grap)
cor(dftrain)
# Correlations with significance levels (p-values)
# REQUIRES Hmisc package
rcorr(as.matrix(dftrain))
# Visual
pairs(dftrain)
# Stripchart
stripchart(losses, method="stack", xlab="Amount", pch=1, col=2, main="Losses", offset=0.5)
stripchart(age~marrieddummy, method="stack", pch=c(1,2), col=marrieddummy+1, xlab="age", ylab="Married", main="Age by Married", offset=0.5)
# REQUIRES corrgram package
corrgram(df)
corrgram(df, order=TRUE, lower.panel=panel.shade,upper.panel=panel.pie, text.panel=panel.txt)
corrgram(df, order=TRUE, lower.panel=panel.ellipse,upper.panel=panel.pts, text.panel=panel.txt,diag.panel=panel.minmax)
# Boxplots
boxplot(losses~marrieddummy)
boxplot(losses~maledummy)
boxplot(losses~gasfueldummy)
boxplot(losses~vehicleage,notch=TRUE, col=(c("gold","darkgreen")),)
# Kernel Density Plot
d <- density(age) # returns the density data
plot(d) # plots the results
d<- density(losses) # returns the density data
plot(d) # plots the results
d<- density(vehicleage) # returns the density data
plot(d) # plots the results
d<- density(yearsofdrivingexperience) # returns the density data
plot(d) # plots the results
d<- density(numberofvehicles) # returns the density data
plot(d) # plots the results
# Make a 3d Plot
plot3d(losses,age,yearsofdrivingexperience,col=gasfueldummy+1)
# Another Spinning 3d Scatterplot
# REQUIRES Rcmdr package
scatter3d(losses, age, yearsofdrivingexperience)
# Be nice
detach(dftrain)
#install.packages("rgl")
rm(list=ls())
# Load the libraries
library(rgl)
library(Hmisc)
library(nFactors)
library(FactoMineR)
library(Rcmdr)
library(vcd)
# Set the seed for reproducibility
set.seed(1234)
# Load the data
df <-read.csv("d:/data/1.csv")
# clean the data names and data
names(df)<-tolower(names(df))
names(df) <- gsub("\\(","",names(df))
names(df) <- gsub("\\)","",names(df))
names(df) <- gsub("-","",names(df))
names(df) <- gsub(",","",names(df))
names(df) <- gsub("\\.","",names(df))
# Make and recode dummy variables
df$gasfueldummy <-as.numeric(df$fueltype)
df$gasfueldummy[df$gasfueldummy == 1] <- 0
df$gasfueldummy[df$gasfueldummy == 2] <- 1
df$maledummy<-as.numeric(df$gender)
df$maledummy[df$maledummy == 1] <- 0
df$maledummy[df$maledummy == 2] <- 1
df$marrieddummy<-as.numeric(df$married)
df$marrieddummy[df$marrieddummy == 2] <- 0
# do the random split (25% held out for test), put the label back into the data frame
df$istest <- runif(nrow(df))<0.25
df$datalabel <- ifelse(df$istest,"test data","train data")
dftrain = df[!df$istest,]
dftest = df[df$istest,]
# remove original columns for the dummies, istest, datatlabels, and policy number
drops <- c("gender","married","fueltype","policynumber","datalabel","istest")
dftrain<-dftrain[,!(names(dftrain) %in% drops)]
dftest<-dftest[,!(names(dftest) %in% drops)]
summary(dftrain)
sapply(dftrain, fivenum, na.rm=TRUE)
aggregate(dftrain, by=list(marrieddummy,gasfueldummy),FUN=fivenum, na.rm=TRUE)
attach(dftrain)
aggregate(dftrain, by=list(marrieddummy,gasfueldummy),FUN=fivenum, na.rm=TRUE)
table(age)
describe(dftrain)
rm(list=ls())
# Set the seed for reproducibility
set.seed(1234)
# Load the data
df <-read.csv("d:/data/Acquired_weakness.csv")
View(df)
?ttest
?t.test
t.test(max_grip~sofall,df)
t.test(max_grip~sofa11,df)
t.test(max_grip~sofa11,df,var.equal=FALSE)
t.test(max_grip~sofa11,df)
t.test(max_grip~sofa11,df,var.equal=TRUE)
?ftest
?f.test
t.test(max_grip~sofa11,df,var.equal=TRUE,alternative=c("two.sided"))
fit<-lm(max_grip~sofa11,df)
summary(fit)
fit2<-lm(max_grip~MVdays+sofa11,df)
summary(fit2)
fit2<-lm(max_grip~MVdays+sofa11+MVdays*sofa11,df)
```
fit2
summary(fit2)
fit3<-lm(max_grip~MVdays+sofa11,df)
summary(fit3)
fit2<-lm(max_grip~MVdays+sofa11+MVdays*sofa11,df)
summary(fit2)
aov(fit2,fit3)
anova(fit2,fit3)
anova(fit2,fit3)
install.packages("rgl")
rm(list=ls())
# Load the libraries
library(rgl)
library(Hmisc)
library(nFactors)
library(FactoMineR)
library(Rcmdr)
library(vcd)
# Set the seed for reproducibility
set.seed(1234)
# Load the data
df <-read.csv("d:/data/1.csv")
# clean the data names and data
names(df)<-tolower(names(df))
names(df) <- gsub("\\(","",names(df))
names(df) <- gsub("\\)","",names(df))
names(df) <- gsub("-","",names(df))
names(df) <- gsub(",","",names(df))
names(df) <- gsub("\\.","",names(df))
# Make and recode dummy variables
df$gasfueldummy <-as.numeric(df$fueltype)
df$gasfueldummy[df$gasfueldummy == 1] <- 0
df$gasfueldummy[df$gasfueldummy == 2] <- 1
df$maledummy<-as.numeric(df$gender)
df$maledummy[df$maledummy == 1] <- 0
df$maledummy[df$maledummy == 2] <- 1
df$marrieddummy<-as.numeric(df$married)
df$marrieddummy[df$marrieddummy == 2] <- 0
# do the random split (25% held out for test), put the label back into the data frame
df$istest <- runif(nrow(df))<0.25
df$datalabel <- ifelse(df$istest,"test data","train data")
dftrain = df[!df$istest,]
dftest = df[df$istest,]
# remove original columns for the dummies, istest, datatlabels, and policy number
drops <- c("gender","married","fueltype","policynumber","datalabel","istest")
dftrain<-dftrain[,!(names(dftrain) %in% drops)]
dftest<-dftest[,!(names(dftest) %in% drops)]
# attach for working
attach(dftrain)
# Explore the data
str(dftrain)
summary(dftrain)
sapply(dftrain, mean, na.rm=TRUE)
aggregate(dftrain, by=list(marrieddummy,gasfueldummy),FUN=mean, na.rm=TRUE)
aggregate(dftrain, by=list(marrieddummy,gasfueldummy,maledummy),FUN=mean, na.rm=TRUE)
table(aggregate(dftrain, by=list(marrieddummy,gasfueldummy,maledummy),FUN=mean, na.rm=TRUE))
plot(aggregate(dftrain, by=list(marrieddummy,gasfueldummy,maledummy),FUN=mean, na.rm=TRUE))
barplot(aggregate(dftrain, by=list(marrieddummy,gasfueldummy,maledummy),FUN=mean, na.rm=TRUE))
boxplot(aggregate(dftrain, by=list(marrieddummy,gasfueldummy,maledummy),FUN=mean, na.rm=TRUE))
aggregate(dftrain, by=list(marrieddummy,gasfueldummy,maledummy),FUN=mean, na.rm=TRUE)
a<-aggregate(dftrain, by=list(marrieddummy,gasfueldummy,maledummy),FUN=mean, na.rm=TRUE)
a
a$age
scatterplot(a$age,a$gasfueldummy)
plot(a$age,a$gasfueldummy)
hist(a$age,a$gasfueldummy)
hist(a$age)
hist(a$losses, main"Average Losses")
hist(a$losses, main="Average Losses")
shiny::runApp()
library(Rcmdr)
Rcmdr()
library(Rcmdr)
Rcmdr
scatter3d(losses, age, yearsofdrivingexperience)
model <- lm(formula=losses ~ . , data=trainSet)
model <- lm(formula=losses ~ . , data=dftrain)
summary(model        )
model$residuals
qqplot(model$residuals)
plot(model$losses, resid(model), ylab="Residuals", xlab="losses", main="Insurance Losses")
abline(0, 0)
qqplot(model$residuals)
resid(model)
plot(resid(model), ylab="Residuals", xlab="losses", main="Insurance Losses")
abline(0, 0)
qqnorm(model$residuals)
qqnorm(rstandard(model$residuals)
)
?rstandard
qqnorm(rstandard(model$residuals))
rstandard(model$residuals)
predict(model, dftest, interval="confidence")
conf1 <-predict(model, dftest, interval="confidence")
pred1 <-predict(model, dftest, interval="prediction")
hist(conf1)
hist(pred1)
plot(pred1)
plot(conf1)
pred1 <-predict(model, dftest)
pred1
dftest$losses
?accuracy
?confusion
?accurcate
library(fcast)
plot(model)
library(MASS)
fit <- lm(losses~.,data=dftrain)
step <- stepAIC(fit, direction="both")
step$anova # display results
outlierTest(fit)
# Turn off scientific notations for numbers
options(scipen = 999)
outlierTest(fit)
qqPlot(fit, main="QQ Plot") #qq plot for studentized resid
leveragePlots(fit) # leverage plots
# qq plot for studentized resid
qqPlot(fit, main="QQ Plot")
# distribution of studentized residuals
sresid <- studres(fit)
hist(sresid, freq=FALSE, main="Distribution of Studentized Residuals")
xfit<-seq(min(sresid),max(sresid),length=40)
yfit<-dnorm(xfit)
lines(xfit, yfit)
