?scale
y<-cbind(z,scale(z))
y
y<-cbind(value=z,standardized=scale(z))
y
y<-cbind(value=z,"standardized"=scale(z))
y
head(y)
?cbind
y<-cbind(value=z,scale(z),log(z))
head(y)
hist(y[,3])
df<-data.frame(value=z,zvalue=scale(z),LOG=log(z),sqrd=z**2)
head(df)
hist(df$sqrd)
hist(df$zvalue)
st.err(z)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
df1<-makedf(runif(1000))
df1
View(df1)
cleanit(df1)
df1<-cleanit(df1)
?runif
runif(1000,2,10)
df1<-makedf(runif(1000,2,12))
plot(df1)
#Make data frame with values
makedf <- function(z,na.rm=FALSE){
df<-data.frame(value=z,zvalue=scale(z),LOG=log(z),sqrt=z**2)
return (df)
}
plot(df1)
df1<-makedf(runif(1000,2,12))
plot(df1)
hist(df`)
hist(df1)
hist(df1[,1])
hist(df1[,2])
hist(df1[,3])
hist(df1[,34])
hist(df1[,4])
hist(df1[,5])
hist(df1[,1])
rchi
?rchisq
rchisq(100)
rchisq(100,25)
df1<-makedf(rchisq(1000,25))
df2<-makedf(runif(1000,2,12))
df3<-makedf(rnorm(1000,100,25))
plot(df1)
plot(df2)
plot(df3)
df1<-cleanit(df1)
df2<-cleanit(df2)
df3<-cleanit(df3)
plot(df3)
plot(df2)
plot(df1)
df1
df2
df1
boxplot(df2)
boxplot(df3)
boxplot(df1)
boxplot(df1$value)
boxplot(df1$value,df2$value,df3$value)
m <- naiveBayes(response ~ ., data = total)
?rbinom
df4<-makedf(rbinom(1000,100,.62))
df4<-cleanit(df4)
plot(df4)
cor(df2)
cor(df1)
cor(df2)
cor(df3)
cor(df4)
asin(sqrt(x))
x <- rnorm(1000,10,2)
asin(sqrt(x))
?asin
asin(x)
x
sqrt(x)
asin(sqrt(x))
arsin(sqrt(x))
1/x
makedf <- function(z,na.rm=FALSE){
df<-data.frame(value=z,zvalue=scale(z),LOG=log(z),sqrt=z**2,reciprocal=1/z)
return (df)
}
df1<-makedf(rchisq(1000,25))
df2<-makedf(runif(1000,2,12))
df3<-makedf(rnorm(1000,100,25))
df4<-makedf(rbinom(1000,100,.62))
df1<-cleanit(df1)
df2<-cleanit(df2)
df3<-cleanit(df3)
df4<-cleanit(df4)
plot(df1)
plot(df2)
plot(df3)
plot(df4)
#Make data frame with values
makedf <- function(z,na.rm=FALSE){
df<-data.frame(value=z,zvalue=scale(z),LOG=log(z),sqrt=z**2,reciprocal=1/z,negreciprocal=-1/z)
return (df)
}
df1<-makedf(rchisq(1000,25))
df2<-makedf(runif(1000,2,12))
df3<-makedf(rnorm(1000,100,25))
df4<-makedf(rbinom(1000,100,.62))
df1<-cleanit(df1)
df2<-cleanit(df2)
df3<-cleanit(df3)
df4<-cleanit(df4)
plot(df1)
plot(df2)
plot(df3)
plot(df4)
makedf <- function(z,na.rm=FALSE){
df<-data.frame(value=z,zvalue=scale(z),LOG=log(z),sqrd=z**2,reciprocal=1/z,negreciprocal=-1/z,sqrt=sqrt(z))
return (df)
}
source('~/.active-rstudio-document', echo=TRUE)
x
sqrt(x)
x**(1/2)
makedf <- function(z,na.rm=FALSE){
df<-data.frame(value=z,zvalue=scale(z),LOG=log(z),sqrd=z**2,sqrt=z**(1/2),cube=z**(1/3),reciprocal=1/z,negreciprocal=-1/z,)
return (df)
}
df1<-makedf(rchisq(1000,25))
df2<-makedf(runif(1000,2,12))
df3<-makedf(rnorm(1000,100,25))
df4<-makedf(rbinom(1000,100,.62))
df1<-cleanit(df1)
df2<-cleanit(df2)
df3<-cleanit(df3)
df4<-cleanit(df4)
plot(df1)
plot(df2)
plot(df3)
plot(df4)
#Make data frame with values
makedf <- function(z,na.rm=FALSE){
df<-data.frame(value=z,zvalue=scale(z),LOG=log(z),sqrd=z**2,sqrt=z**(1/2),cube=z**(1/3),reciprocal=1/z,negreciprocal=-1/z)
return (df)
}
df1<-makedf(rchisq(1000,25))
df2<-makedf(runif(1000,2,12))
df3<-makedf(rnorm(1000,100,25))
df4<-makedf(rbinom(1000,100,.62))
df1<-cleanit(df1)
df2<-cleanit(df2)
df3<-cleanit(df3)
df4<-cleanit(df4)
plot(df1)
plot(df2)
plot(df3)
plot(df4)
df3<-makedf(rnorm(1000,100,2))
df3<-cleanit(df3)
plot(df3)
boxplot(df3)
boxplot(df3$value)
boxplot(df3$cube)
boxplot(df3$cube.df3$value)
boxplot(df3$cube,df3$value)
source('~/.active-rstudio-document', echo=TRUE)
?rchisq
rpois(1000,4)
hist(rpois(1000,4))
df5<-makedf(rpois(1000,4))
df5<-cleanit(df5)
plot(df5)
# Load functions
source('functions.R')
# Load the libraries
library(e1071)
library(epitools)
df0<- data.frame(cbind (Ind=rep("Long",400),Dep=rep("Banana",21)))
df1<- data.frame(cbind (Ind=rep("Long",60,Dep=rep("Orange",0)))
df2<- data.frame(cbind (Ind=rep("Long",100),Dep=rep("Other",100)))
total <- rbind(df0, df1,df2)
df0<- data.frame(cbind (Ind=rep("NotLong",100),Dep=rep("Banana",100)))
df1<- data.frame(cbind (Ind=rep("NotLong",300),Dep=rep("Orange",300)))
df2<- data.frame(cbind (Ind=rep("NotLong",100),Dep=rep("Other",100)))
total <- rbind(total, df0)
total <- rbind(total, df1)
total <- rbind(total, df2)
total <- rbind(df0, df1,df2)
df0<- data.frame(cbind (Ind=rep("Long",400),Dep=rep("Banana",21)))
df1<- data.frame(cbind (Ind=rep("Long",60,Dep=rep("Orange",0)))
df2<- data.frame(cbind (Ind=rep("Long",100),Dep=rep("Other",100)))
df0<- data.frame(cbind (Ind=rep("Long",400),Dep=rep("Banana",21)))
df1<- data.frame(cbind (Ind=rep("Long",0),Dep=rep("Orange",0)))
df2<- data.frame(cbind (Ind=rep("Long",100),Dep=rep("Other",100)))
total <- rbind(df0, df1,df2)
df0<- data.frame(cbind (Ind=rep("NotLong",100),Dep=rep("Banana",100)))
df1<- data.frame(cbind (Ind=rep("NotLong",300),Dep=rep("Orange",300)))
df2<- data.frame(cbind (Ind=rep("NotLong",100),Dep=rep("Other",100)))
total <- rbind(total, df0)
total <- rbind(total, df1)
total <- rbind(total, df2)
rm(df0,df1,df2)
View(total)
m <- naiveBayes(Dep~Ind, data = total)
m
df0<- data.frame(cbind (Ind2=rep("Sweet",350),Dep=rep("Banana",350)))
df1<- data.frame(cbind (Ind2=rep("Sweet",150),Dep=rep("Orange",150)))
df2<- data.frame(cbind (Ind2=rep("Sweet",150),Dep=rep("Other",150)))
total <- rbind(total, df0)
total <- rbind(total, df1)
total <- rbind(total, df2)
df0<- data.frame(cbind (Ind1=rep("Long",400),Dep=rep("Banana",21)))
df1<- data.frame(cbind (Ind1=rep("Long",0),Dep=rep("Orange",0)))
df2<- data.frame(cbind (Ind1=rep("Long",100),Dep=rep("Other",100)))
df3<- data.frame(cbind (Ind2=rep("Sweet",350),Dep=rep("Banana",350)))
df4<- data.frame(cbind (Ind2=rep("Sweet",150),Dep=rep("Orange",150)))
df5<- data.frame(cbind (Ind2=rep("Sweet",150),Dep=rep("Other",150)))
total <- rbind(df0,df1,df2,df3,df4,df5)
rm(total)
total <- rbind(df0,df1,df2,df3,df4,df5)
df0<- data.frame(cbind (Ind1=rep("Long",400),Dep=rep("Banana",21)))
df1<- data.frame(cbind (Ind1=rep("Long",0),Dep=rep("Orange",0)))
df2<- data.frame(cbind (Ind1=rep("Long",100),Dep=rep("Other",100)))
total <- rbind(df0,df1,df2)
df0<- data.frame(cbind (Ind1=rep("NotLong",100),Dep=rep("Banana",100)))
df1<- data.frame(cbind (Ind1=rep("NotLong",300),Dep=rep("Orange",300)))
df2<- data.frame(cbind (Ind1=rep("NotLong",100),Dep=rep("Other",100)))
total <- rbind(total, df0)
total <- rbind(total, df1)
total <- rbind(total, df2)
rm(df0,df1,df2)
rm(df5,df4,df3)
df0<- data.frame(cbind (Ind2=rep("Sweet",350),Dep=rep("Banana",350)))
df0<- data.frame(cbind (Ind1=rep("Sweet",350),Dep=rep("Banana",350)))
df1<- data.frame(cbind (Ind1=rep("Sweet",150),Dep=rep("Orange",150)))
df2<- data.frame(cbind (Ind1=rep("Sweet",150),Dep=rep("Other",150)))
total <- rbind(total, df0)
total <- rbind(total, df1)
total <- rbind(total, df2)
View(total)
total<-data.frame(Ind1,Ind2,Ind3,Dep)
total<-data.frame(Ind1=,Ind2=,Ind3=,Dep=)
total<-data.frame(Ind1=1,Ind2=1,Ind3=1,Dep=1)
df0<- data.frame(cbind (Ind1=rep("Long",400),Dep=rep("Banana",21)))
df1<- data.frame(cbind (Ind1=rep("Long",0),Dep=rep("Orange",0)))
df2<- data.frame(cbind (Ind1=rep("Long",100),Dep=rep("Other",100)))
df0<- data.frame(cbind (Ind1=rep("Long",400),Dep=rep("Banana",400)))
total <- rbind(total, df0)
df0<- data.frame(cbind (Ind1=rep("Long",400),(Ind1=rep("Long",100)Dep=rep("Banana",500)))
df0<- data.frame(cbind (Ind1=rep("Long",400),(Ind1=rep("Long",100),Dep=rep("Banana",500)))
df0<- data.frame(cbind (Ind1=rep("Long",400),Ind1=rep("Long",100),Dep=rep("Banana",500)))
Long=rep(1,400)
Long <- rbind(Long, rep(0,100))
View(Long)
Long<-rep(1,400)
Long <- append(Long, rep(0,100))
View(df0)
table(long)
table(Long)
Sweet<-rep(1,350)
Sweet<- append(Sweet,rep(0,150))
Yellow=rep(1,450)
Yellow<- append(Yellow,rep(0,50))
Dep<-rep("Banana",500)
total <- cbind(Long,Sweet,Yellow,Dep)
m <- naiveBayes(Dep~Long+Sweet+Yellow, data = total)
View(total)
table(total)
Long<-rep("Long",400)
Long <- append(Long, rep("NotLong",100))
Sweet<-rep("Sweet",350)
Sweet<- append(Sweet,rep("NotSweet",150))
Yellow<- rep("Yellow",450)
Yellow<- append(Yellow,rep("NotYellow",50))
Dep<-rep("Banana",500)
total <- cbind(Long,Sweet,Yellow,Dep)
table(total)
m <- naiveBayes(Dep~Long+Sweet+Yellow, data = total)
m <- naiveBayes(Dep~., data = total)
sum(total)
total <- data.frame(Long,Sweet,Yellow,Dep)
sum(total)
m <- naiveBayes(Dep~., data = total)
m
Long<-rep("Long",0)
Long <- append(Long, rep("NotLong",300))
Sweet<-rep("Sweet",150)
Sweet<- append(Sweet,rep("NotSweet",150))
Yellow<- rep("Yellow",300)
Yellow<- append(Yellow,rep("NotYellow",0))
Dep<-rep("Orange",300)
df1<- data.frame(Long,Sweet,Yellow,Dep)
Long<-rep("Long",400)
Long <- append(Long, rep("NotLong",100))
Sweet<-rep("Sweet",350)
Sweet<- append(Sweet,rep("NotSweet",150))
Yellow<- rep("Yellow",450)
Yellow<- append(Yellow,rep("NotYellow",50))
Dep<-rep("Banana",500)
df0 <- data.frame(Long,Sweet,Yellow,Dep)
#Add Others
Long<-rep("Long",100)
Long <- append(Long, rep("NotLong",100))
Sweet<-rep("Sweet",150)
Sweet<- append(Sweet,rep("NotSweet",50))
Yellow<- rep("Yellow",50)
Yellow<- append(Yellow,rep("NotYellow",150))
Dep<-rep("Other",200)
df2<- data.frame(Long,Sweet,Yellow,Dep)
total <- rbind(df0,df1,df2)
m <- naiveBayes(Dep~., data = total)
sum(total)
m
rm(df0,df1,df2,Yellow,Sweet,Long,Dep)
source('C:\Users\bryan_000\Documents\GitHub\MyWork\functions.R')
source('C:/Users/bryan_000/Documents/GitHub/MyWork/functions.R')
test<-data.frame(Long="Long",Sweet="Sweet",Yellow="Yellow")
pred<-predict(m, test )
# Load functions
source('C:/Users/bryan_000/Documents/GitHub/MyWork/functions.R')
# Load the libraries
library(e1071)
library(epitools)
#Add Bananas
Long<-rep("Long",400)
Long <- append(Long, rep("NotLong",100))
Sweet<-rep("Sweet",350)
Sweet<- append(Sweet,rep("NotSweet",150))
Yellow<- rep("Yellow",450)
Yellow<- append(Yellow,rep("NotYellow",50))
Dep<-rep("Banana",500)
df0 <- data.frame(Long,Sweet,Yellow,Dep)
#Add oranges
Long<-rep("Long",0)
Long <- append(Long, rep("NotLong",300))
Sweet<-rep("Sweet",150)
Sweet<- append(Sweet,rep("NotSweet",150))
Yellow<- rep("Yellow",300)
Yellow<- append(Yellow,rep("NotYellow",0))
Dep<-rep("Orange",300)
df1<- data.frame(Long,Sweet,Yellow,Dep)
#Add Others
Long<-rep("Long",100)
Long <- append(Long, rep("NotLong",100))
Sweet<-rep("Sweet",150)
Sweet<- append(Sweet,rep("NotSweet",50))
Yellow<- rep("Yellow",50)
Yellow<- append(Yellow,rep("NotYellow",150))
Dep<-rep("Other",200)
df2<- data.frame(Long,Sweet,Yellow,Dep)
total <- rbind(df0,df1,df2)
rm(df0,df1,df2,Yellow,Sweet,Long,Dep)
m <- naiveBayes(Dep~., data = total)
m
test<-data.frame(Long="Long",Sweet="Sweet",Yellow="Yellow")
pred<-predict(m, test )
pred
summary(pred)
str(pred)
predict(m,test)
?predict
test<-data.frame(Long="NotLong",Sweet="Sweet",Yellow="Yellow")
pred<-predict(m, test )
summary(pred)
test<-data.frame(Long="NotLong",Sweet="NotSweet",Yellow="NotYellow")
pred<-predict(m, test )
summary(pred)
pred<-predict(m, test,type = c("class"))
summary(pred)
pred<-predict(m, test,type = c("raw"))
summary(pred)
test<-data.frame(Long="NLong",Sweet="Sweet",Yellow="Yellow")
pred<-predict(m, test,type = c("raw"))
summary(pred)
pred
test<-data.frame(Long="Long",Sweet="Sweet",Yellow="Yellow")
pred<-predict(m, test,type = c("raw"))
pred
View(test)
View(total)
View(test)
m <- naiveBayes(Dep~., data = total,laplace = 3)
m
test<-data.frame(Long="Long",Sweet="Sweet",Yellow="Yellow")
pred<-predict(m, test,type = c("raw"))
pred
?NaiveBayes
?naiveBayes
m <- naiveBayes(Dep~., data = total)
m
predict(m, iris[,-4]), total[,4])
predict(m, total[,-4]), total[,4])
total[,4]
predict(m, total[,-4]), total[,4]
predict(m, total[,-4], total[,4])
predict(m, total[,4])
predict(m, total[,4], "raw")
test<-data.frame(Long="Long",Sweet="Sweet",Yellow="Yellow")
pred<-predict(m, test,"raw"
pred
pred
predict(m, total[,4], "raw")
testpred<-predict(m, total[,4], "raw)"
testpred<-predict(m, total[,4], "raw")
testpred<-predict(m, total[,4], "raw")
summary(testpred)
naiveBayes(total[,1:3],total[1,4])
naiveBayes(total[,1:3],total[,4])
m
# Load functions
source('C:/Users/bryan_000/Documents/GitHub/MyWork/functions.R')
# Load the libraries
library(e1071)
library(epitools)
#Add Bananas
Long<-rep("Long",400)
Long <- append(Long, rep("NotLong",100))
Sweet<-rep("Sweet",350)
Sweet<- append(Sweet,rep("NotSweet",150))
Yellow<- rep("Yellow",450)
Yellow<- append(Yellow,rep("NotYellow",50))
Dep<-rep("Banana",500)
df0 <- data.frame(Long,Sweet,Yellow,Dep)
#Add oranges
Long<-rep("Long",0)
Long <- append(Long, rep("NotLong",300))
Sweet<-rep("Sweet",150)
Sweet<- append(Sweet,rep("NotSweet",150))
Yellow<- rep("Yellow",0)
Yellow<- append(Yellow,rep("NotYellow",300))
Dep<-rep("Orange",300)
df1<- data.frame(Long,Sweet,Yellow,Dep)
#Add Others
Long<-rep("Long",100)
Long <- append(Long, rep("NotLong",100))
Sweet<-rep("Sweet",150)
Sweet<- append(Sweet,rep("NotSweet",50))
Yellow<- rep("Yellow",50)
Yellow<- append(Yellow,rep("NotYellow",150))
Dep<-rep("Other",200)
df2<- data.frame(Long,Sweet,Yellow,Dep)
total <- rbind(df0,df1,df2)
rm(df0,df1,df2,Yellow,Sweet,Long,Dep)
m <- naiveBayes(Dep~., data = total) # or  naiveBayes(total[,1:3],total[,4])
m
test<-data.frame(Long="Long",Sweet="Sweet",Yellow="Yellow")
pred<-predict(m, test,"raw")
pred
test<-data.frame(Long="Long",Sweet="Sweet",Yellow="Yellow")
pred<-predict(m, test,"raw")
testpred<-predict(m, total[,4], "raw")
pred
summary(testpred)
est<-data.frame(Long="Long",Sweet="Sweet",Yellow="Yellow")
pred<-predict(m, test,"raw")
pred
summary(pred)
testpred<-predict(m, total[,4], "raw")
summary(testpred)
test<-data.frame(Long="Long",Sweet="Sweet",Yellow="Yellow")
pred<-predict(m, test,"raw")
pred
summary(pred)
testpred<-predict(m, total[,4], "raw")
summary(testpred)
iris
data(HouseVotes84, package = "mlbench")
HouseVotes84
str(HouseVotes84)
View(test)
View(total)
str(total)
m <- naiveBayes(Dep~., data = total) # or  naiveBayes(total[,1:3],total[,4])
m
predict(m, total[1:10,])
predict(m, total[1:10,],type="raw")
predict(m, total[100:200,],type="raw")
predict(m, total[100:200,-4],type="raw")
predict(m, total[800:900,],type="raw")
predict(m, total[100:1000,],type="raw")
test1pred<-predict(m, total[-4],"raw")
test2predict(m, total[100:1000,],type="raw")
test2pred<-predict(m, total[100:1000,],type="raw")
same
diff(test1pred,test2pred)
comapre(test1pred,test2pred)
compare(test1pred,test2pred)
?compare
library(psych)
?compare
install.packages(compare)
install.packages("compare")
library(compare)
compare(test1pred, test2pred)
?compare
compare(test1pred, test2pred,allowAll=TRUE)
head(test1pred)
head(test2pred)
head(test2pred,25)
hist(test2pred)
hist(test1pred)
table(test1pred,test2pred)
test1pred<-predict(m, total[-4],"raw")
test2pred<-predict(m, total[1:1000,],type="raw")
compare(test1pred, test2pred,allowAll=TRUE)
table(test1pred,test2pred)
