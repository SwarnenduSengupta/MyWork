# Make some data frames to use
testInd <- test[ ,!colnames(test) %in% "low"]
testDep <- as.factor(test[, names(test) == "low"])
trainInd <- train[ ,!colnames(train) %in% "low"]
trainDep <- as.factor(train[, names(train) == "low"])
# do the random split (25% held out for test), put the label back into the data frame
df$istest <- runif(nrow(df))<0.25
df$datalabel <- ifelse(df$istest,"test data","train data")
dftrain = df[!df$istest,]
dftest = df[df$istest,]
# remove unneeded columns
cols<-c("istest","datalabel")
dftrain<-dftrain[,!names(dftrain) %in% cols]
dftest<-dftest[,!names(dftest) %in% cols]
#remove uneeded variables and dataframes
rm(df,splitIndex,test,train,cols)
sapply(dftrain,mean)
sapply(dftrain,median)
sapply(dftrain,sd)
# Continous data use type=6
quantile(bwt, probs = c(5,10,25,50,75)/100, type=6)
IQR(bwt,type=6)
fivenum(bwt)
# Continous data use type=6
quantile(bwt, probs = c(5,10,25,50,75)/100, type=6)
IQR(bwt,type=6)
fivenum(bwt)
# REQUIRES psych package
describe(dftrain$bwt, type=1)
describeBy(dftrain$bwt,dftrain$low, type=1)
aggregate(age~low,mean,data=dftrain)
aggregate(age~low,fivenum,data=dftrain)
aggregate(age~low,median,data=dftrain)
aggregate(age~low,sd,data=dftrain)
aggregate(age~low,IQR,type=6,data=dftrain)
aggregate(age~low,skewness,type=1,data=dftrain)
aggregate(age~low,kurtosis,type=1,data=dftrain)
# REQUIRES e1071 package
# Use type 1
skewness(age,type=1)
# Uses excecess kurtisis (should be 0)
kurtosis(age, type=1)
boxplot(dftrain$age~dftrain$low, xlab="Survived", ylab="Age")
boxplot(dftrain$bwt~dftrain$low, xlab="Survived", ylab="Log Fare")
boxplot(dftrain$lwt~dftrain$low, xlab="Survived", ylab="Log Fare")
boxplot(dftrain$ftv~dftrain$low, xlab="Diabetes", ylab="Diastolic Blood Pressure")
dotchart(dftrain$age, xlab="Plasma Glucose")
stripchart(dftrain$age~dftrain$low,method="stack", pch=c(1,2), col=c("red","blue"), xlab="Plasma Glucose", ylab="Diabetes", main="Diabetes vs. Plasma Glucose",offset=0.5)
stripchart(dftrain$age~dftrain$low,method="jitter", pch=c(1,2), col=c("red","blue"), xlab="Age", ylab="Survived", main="Age vs. Survived",offset=0.5)
xtabs(~low + age, data = dftrain)
summary(xtabs(~low + age, data = dftrain))
summary(xtabs(~low + lwt, data = dftrain))
xtabs(~survived + lwt, data = dftrain)
xtabs(~low + lwt, data = dftrain)
basicStats(dftrain) #Computed basic stats
colStats(dftrain)
colMeans(dftrain) # Computes sample mean by col
colVars(dftrain) # Computes sample variance  by col
colSds(dftrain) # Computes sample standard deviation  by col
colSkewness (dftrain$age) # Computes sample skewness by col
colKurtosis (dftrain) # Computes sample kurtosis by col
colMaxs (dftrain) # Computes maximum values in each col
colMins (dftrain) # Computes minimum values in each col
colProds (dftrain) # Computes product of values in each col
colQuantiles(dftrain, prob=.10)#Computes product of values in each col
# Load functions
source('functions.R')
# Load the libraries
library(psych)
library(e1071)
library(caret)
library(fBasics)
# Load the data
df<-read.csv(file.choose())
#df <-read.csv("d:/data/diabetes.csv")
# count blanks remove blanks
colSums(!is.na(df))
df <- na.omit(df)
#colSums(!is.na(df))
# clean the data names and data
df<-cleanit(df)
# remove a column
#df$id <-NULL
# REQUIRES caret package to split
# separate data into test and train sets, 75/25 split in this case
splitIndex <- createDataPartition(df$low, p = 0.75, list = FALSE)
train <- df[splitIndex, ]
test <- df[-splitIndex, ]
# Make some data frames to use
testInd <- test[ ,!colnames(test) %in% "low"]
testDep <- as.factor(test[, names(test) == "low"])
trainInd <- train[ ,!colnames(train) %in% "low"]
trainDep <- as.factor(train[, names(train) == "low"])
# do the random split (25% held out for test), put the label back into the data frame
df$istest <- runif(nrow(df))<0.25
df$datalabel <- ifelse(df$istest,"test data","train data")
dftrain = df[!df$istest,]
dftest = df[df$istest,]
# remove unneeded columns
cols<-c("istest","datalabel")
dftrain<-dftrain[,!names(dftrain) %in% cols]
dftest<-dftest[,!names(dftest) %in% cols]
#remove uneeded variables and dataframes
rm(df,splitIndex,test,train,cols)
# Explore the data
str(dftrain)
summary(dftrain)
# Statistics
sapply(dftrain,mean)
sapply(dftrain,median)
sapply(dftrain,sd)
# REQUIRES fBasics package
basicStats(dftrain) #Computed basic stats
colStats(dftrain)
colMeans(dftrain) # Computes sample mean by col
colVars(dftrain) # Computes sample variance  by col
colSds(dftrain) # Computes sample standard deviation  by col
colSkewness (dftrain$age) # Computes sample skewness by col
colKurtosis (dftrain) # Computes sample kurtosis by col
colMaxs (dftrain) # Computes maximum values in each col
colMins (dftrain) # Computes minimum values in each col
colProds (dftrain) # Computes product of values in each col
colQuantiles(dftrain, prob=.10)#Computes product of values in each col
# Continous data use type=6
quantile(bwt, probs = c(5,10,25,50,75)/100, type=6)
IQR(bwt,type=6)
fivenum(bwt)
# REQUIRES psych package
describe(dftrain$bwt, type=1)
describeBy(dftrain$bwt,dftrain$low, type=1)
#aggreate
aggregate(age~low,mean,data=dftrain)
aggregate(age~low,fivenum,data=dftrain)
aggregate(age~low,median,data=dftrain)
aggregate(age~low,sd,data=dftrain)
aggregate(age~low,IQR,type=6,data=dftrain)
aggregate(age~low,skewness,type=1,data=dftrain)
aggregate(age~low,kurtosis,type=1,data=dftrain)
# REQUIRES e1071 package
# Use type 1
skewness(age,type=1)
# Uses excecess kurtisis (should be 0)
kurtosis(age, type=1)
# View some basic boxplots
boxplot(dftrain$age~dftrain$low, xlab="Survived", ylab="Age")
boxplot(dftrain$lwt~dftrain$low, xlab="Survived", ylab="Log Fare")
boxplot(dftrain$ftv~dftrain$low, xlab="Diabetes", ylab="Diastolic Blood Pressure")
# View a dotplot
dotchart(dftrain$age, xlab="Plasma Glucose")
# View Stripchart
stripchart(dftrain$age~dftrain$low,method="jitter", pch=c(1,2), col=c("red","blue"), xlab="Age", ylab="Survived", main="Age vs. Survived",offset=0.5)
stripchart(dftrain$age~dftrain$low,method="stack", pch=c(1,2), col=c("red","blue"), xlab="Plasma Glucose", ylab="Diabetes", main="Diabetes vs. Plasma Glucose",offset=0.5)
# two-way contingency table of categorical outcome and predictors we want
#  to make sure there are not 0 cells
xtabs(~low + age, data = dftrain)
summary(xtabs(~low + age, data = dftrain))
xtabs(~low + lwt, data = dftrain)
summary(xtabs(~low + lwt, data = dftrain))
df$id <-NULL
```{r,warnings=FALSE, messages=FALSE}
# Load functions
source('functions.R')
##Load libraries
library(car)
library(gvlma)
library(corrgram)
library(ggplot2)
library(e1071)
library(fBasics)
library(gmodels)
data(mtcars)
#create a new columns
#mtcars$wthp <- mtcars$wt*mtcars$hp
#mtcars$LOGMPG <- log(mtcars$mpg)
#Clean the data
mtcars<-cleanit(mtcars)
# count blanks remove blanks
colSums(!is.na(mtcars))
# mtcars <- na.omit(mtcars)
#colSums(!is.na(mtcars))
# REQUIRES fBasics package
basicStats(mtcars) #Computed basic stats
colStats(mtcars,mean)
colMeans(mtcars) # Computes sample mean by col
colVars(mtcars) # Computes sample variance  by col
colSds(mtcars) # Computes sample standard deviation  by col
colSkewness (mtcars) # Computes sample skewness by col
colKurtosis (mtcars) # Computes sample kurtosis by col
colMaxs (mtcars) # Computes maximum values in each col
colMins (mtcars) # Computes minimum values in each col
colProds (mtcars) # Computes product of values in each col
colQuantiles(mtcars, prob=.10)#Computes product of values in each col
```
Compute the correlation matrix with all 11 varaiables.
```{r}
cor(mtcars)
```
Show corr gram
```{r}
corrgram(mtcars, order=TRUE, lower.panel=panel.shade,
upper.panel=panel.pie, text.panel=panel.txt,
main="Car Milage Data in PC2/PC1 Order")
```
```{r}
corrgram(mtcars, order=TRUE, lower.panel=panel.ellipse,
upper.panel=panel.pts, text.panel=panel.txt,
diag.panel=panel.minmax,
main="Car Milage Data in PC2/PC1 Order")
```
Trim down the correlation matrix to first column and sort it
```{r}
cor.out <- sort(cor(mtcars)[,1])
round(cor.out, 3)
```
For more efficient analysis, transform the following 5 variables into factors:
```{r}
mtcars$gear <- factor(mtcars$gear,levels=c(3,4,5),labels=c("3-gears","4-gears","5-gears"))
mtcars$cyl <- factor(mtcars$cyl,levels=c(4,6,8),labels=c("4-cyl","6-cyl","8-cyl"))
mtcars$am <- factor(mtcars$am,levels=c(0,1),labels=c("Automatic","Manual"))
mtcars$vs <- factor(mtcars$vs,,levels=c(0,1),labels=c("V-Engine","Straight-Engine"))
mtcars$carb <- factor(mtcars$carb,levels=c(1,2,3,4,6,8),labels=c("1-carb","2-carbs","3-carbs","4-carbs","6-carbs","8-carbs"))
```
##Numerical Summaries
```{r,warning=FALSE,message=FALSE}
str(mtcars)
summary(mtcars)
# View Indiviudal Numerial variables Grouped by all the factor variables
cbind("SampleSize"=aggregate(hp ~ carb + am+cyl+vs+gear, mtcars, length), "mean"=aggregate(hp ~ carb + am+cyl+vs+gear, mtcars, mean)[,6],"StdErr"=aggregate(hp ~ carb + am+cyl+vs+gear, mtcars, st.err)[,6])
cbind("SampleSize"=aggregate(mpg ~ carb + am+cyl+vs+gear, mtcars, length), "mean"=aggregate(mpg ~ carb + am+cyl+vs+gear, mtcars, mean)[,6],"StdErr"=aggregate(mpg ~ carb + am+cyl+vs+gear, mtcars, st.err)[,6])
cbind("SampleSize"=aggregate(qsec ~ carb + am+cyl+vs+gear, mtcars, length), "mean"=aggregate(qsec ~ carb + am+cyl+vs+gear, mtcars, mean)[,6],"StdErr"=aggregate(qsec ~ carb + am+cyl+vs+gear, mtcars, st.err)[,6])
cbind("SampleSize"=aggregate(wt ~ carb + am+cyl+vs+gear, mtcars, length), "mean"=aggregate(wt ~ carb + am+cyl+vs+gear, mtcars, mean)[,6],"StdErr"=aggregate(wt ~ carb + am+cyl+vs+gear, mtcars, st.err)[,6])
cbind("SampleSize"=aggregate(disp ~ carb + am+cyl+vs+gear, mtcars, length), "mean"=aggregate(disp ~ carb + am+cyl+vs+gear, mtcars, mean)[,6],"StdErr"=aggregate(disp ~ carb + am+cyl+vs+gear, mtcars, st.err)[,6])
```
mean(mtcars$mpg)
stem(mtcars$mpg)
fivenum(mtcars$mpg,na.rm=TRUE)
# Continous data use type=6
quantile(mtcars$mpg, probs = c(5,10,25,50,75)/100, type=6)
IQR(mtcars$mpg,type=6)
# Factors
table(mtcars$carb)
table(mtcars$gear)
table(mtcars$cyl)
table(mtcars$am)
table(mtcars$vs)
aggregate(mpg~cyl, data = mtcars, mean)
aggregate(mpg~vs, data = mtcars, mean)
aggregate(mpg~gear, data = mtcars, mean)
aggregate(mpg~carb, data = mtcars, mean)
#Factors
table(mtcars$am, mtcars$vs)
table(mtcars$am, mtcars$cyl)
ftable(table(mtcars$am, mtcars$car))
# 2 way Freq Tables
# mytable <- table(A,B) # A will be rows(Dependent), B will be columns (Independent)
table(mtcars$am, mtcars$gear)
sum(table(mtcars$am, mtcars$gear))
margin.table(table(mtcars$am, mtcars$gear),1) # Row frequencies (summed over columns)
margin.table(table(mtcars$am, mtcars$gear),2) # Column frequencies (summed over rows)
prop.table(table(mtcars$am, mtcars$gear))# cell percentages relative frequences accross all
prop.table(table(mtcars$am, mtcars$gear),1)# row percentages
prop.table(table(mtcars$am, mtcars$gear),2) # Column percentages
addmargins(table(mtcars$am, mtcars$gear), margin=2) # Margin containing row sums
addmargins(table(mtcars$am, mtcars$gear), margin=1) # Margin containing column sums
addmargins(table(mtcars$am, mtcars$gear), FUN=sum) # Marginal sums
addmargins(table(mtcars$am, mtcars$gear), FUN=mean) # Marginal means
addmargins(table(mtcars$am, mtcars$gear), FUN = list(Sum = sum, list(Min = min, Max = max))) # Marginal
addmargins(table(mtcars$am, mtcars$gear),  FUN = list(list(Min = min, Max = max), Sum = sum)) # Marginal
xtabs(~mpg + am, data = mtcars)
summary(xtabs(~mpg + am, data = mtcars))
# Test for Association/Correlation Between Paired Samples
cor.test(~mpg+wt, data=mtcars)
cor.test(~mpg+hp, data=mtcars)
cor.test(~mpg+qsec, data=mtcars)
cor.test(~mpg+disp, data=mtcars)
cor.test(~mpg+drat, data=mtcars)
addmargins(table(mtcars$am, mtcars$gear),  FUN = list(list(Sum = sum), Sum = sum)) # Marginal
xtabs(~mpg + am, data = mtcars)
summary(xtabs(~mpg + am, data = mtcars))
xtabs(~low + age, data = dftrain)
summary(xtabs(~low + age, data = dftrain))
xtabs(~low + lwt, data = dftrain)
summary(xtabs(~low + lwt, data = dftrain))
# Load functions
source('functions.R')
# Load the libraries
library(psych)
library(e1071)
library(caret)
library(fBasics)
# Load the data
df<-read.csv(file.choose()) #lowbw.csv
#df <-read.csv("d:/data/diabetes.csv")
# count blanks remove blanks
colSums(!is.na(df))
df <- na.omit(df)
#colSums(!is.na(df))
# clean the data names and data
df<-cleanit(df)
# remove a column
df$id <-NULL
# REQUIRES caret package to split
# separate data into test and train sets, 75/25 split in this case
splitIndex <- createDataPartition(df$low, p = 0.75, list = FALSE)
train <- df[splitIndex, ]
test <- df[-splitIndex, ]
# Make some data frames to use
testInd <- test[ ,!colnames(test) %in% "low"]
testDep <- as.factor(test[, names(test) == "low"])
trainInd <- train[ ,!colnames(train) %in% "low"]
trainDep <- as.factor(train[, names(train) == "low"])
# do the random split (25% held out for test), put the label back into the data frame
df$istest <- runif(nrow(df))<0.25
df$datalabel <- ifelse(df$istest,"test data","train data")
dftrain = df[!df$istest,]
dftest = df[df$istest,]
# remove unneeded columns
cols<-c("istest","datalabel")
dftrain<-dftrain[,!names(dftrain) %in% cols]
dftest<-dftest[,!names(dftest) %in% cols]
#remove uneeded variables and dataframes
rm(df,splitIndex,test,train,cols)
# two-way contingency table of categorical outcome and predictors we want
#  to make sure there are not 0 cells
xtabs(~low + age, data = dftrain)
summary(xtabs(~low + age, data = dftrain))
xtabs(~low + lwt, data = dftrain)
summary(xtabs(~low + lwt, data = dftrain))
table(mtcars$low, mtcars$age)
table(dftrain$low, dftrain$age)
sum(table(dftrain$low, dftrain$age))
xtabs(~low + age, data = dftrain)
summary(xtabs(~low + age, data = dftrain))
xtabs(~low + lwt, data = dftrain)
summary(xtabs(~low + lwt, data = dftrain))
margin.table(table(dftrain$low, dftrain$age),1) # Row frequencies (summed over columns)
margin.table(table(dftrain$low, dftrain$age),2) # Column frequencies (summed over rows)
prop.table(table(dftrain$low, dftrain$age))# cell percentages relative frequences accross all
prop.table(table(dftrain$low, dftrain$age),1)# row percentages
prop.table(table(dftrain$low, dftrain$age),2) # Column percentages
addmargins(table(dftrain$low, dftrain$age), margin=2) # Margin containing row sums
addmargins(dftrain$low, dftrain$age), margin=1) # Margin containing column sums
addmargins(dftrain$low, dftrain$age), margin=1) # Margin containing column sums
addmargins(table(dftrain$low, dftrain$age), margin=1) # Margin containing column sums
summary(xtabs(~lwt + low, data = dftrain))
xtabs(~lwt + low, data = dftrain)
xtabs(~+ low, data = dftrain)
summary(xtabs(~smoke + low, data = dftrain))
addmargins(table(dftrain$low, dftrain$age), margin=2) # Margin containing row sums
addmargins(table(dftrain$low, dftrain$age), margin=1) # Margin containing column sums
addmargins(table(mtcars$low, mtcars$age), FUN=sum) # Marginal sums
addmargins(table(mtcars$low, mtcars$age), FUN=mean) # Marginal means
addmargins(table(mtcars$low, mtcars$age), FUN = list(Sum = sum, list(Min = min, Max = max))) # Marginal
addmargins(table(mtcars$low, mtcars$age),  FUN = list(list(Min = min, Max = max), Sum = sum)) # Marginal
addmargins(table(mtcars$low, mtcars$age),  FUN = list(list(Sum = sum), Sum = sum)) # Marginal
addmargins(table(dftrain$low, dftrain$age), margin=2) # Margin containing row sums
addmargins(table(dftrain$low, dftrain$age), margin=1) # Margin containing column sums
addmargins(table(dftrain$low, dftrain$age), FUN=sum) # Marginal sums
addmargins(table(dftrain$low, dftrain$age), FUN=mean) # Marginal means
addmargins(table(dftrain$low, dftrain$age), FUN = list(Sum = sum, list(Min = min, Max = max))) # Marginal
addmargins(table(dftrain$low, dftrain$age),  FUN = list(list(Min = min, Max = max), Sum = sum)) # Marginal
addmargins(table(dftrain$low, dftrain$age),  FUN = list(list(Sum = sum), Sum = sum)) # Marginal
xtabs
xtabs(~ smoke + low, data = dftrain)
summary(xtabs(~ui + low, data = dftrain))
xtabs(~ ui + low, data = dftrain)
```{r,warning=FALSE,message=FALSE}
pairs(mtcars)
##Set printing
par(mfrow=c(1,2))
## simple data plot of outcome
plot (sort(mtcars$mpg))
## histogram of outcome
hist(mtcars$mpg)
rug(mtcars$mpg)
## density plot of outcome
plot(density(mtcars$mpg,na.rm=TRUE))
#Check Outliers of outcome
outliers(mtcars$mpg)
plot(outliers(mtcars$mpg)$Z)
plot(outliers(mtcars$mpg)$Z)
outliers(mtcars$mpg)
basicStats(dftrain) #Computed basic stats
colStats(dftrain)
colMeans(dftrain) # Computes sample mean by col
colVars(dftrain) # Computes sample variance  by col
colSds(dftrain) # Computes sample standard deviation  by col
colSkewness (dftrain$age) # Computes sample skewness by col
colKurtosis (dftrain) # Computes sample kurtosis by col
colMaxs (dftrain) # Computes maximum values in each col
colMins (dftrain) # Computes minimum values in each col
colProds (dftrain) # Computes product of values in each col
colQuantiles(dftrain, prob=.10)#Computes product of values in each col
# Continous data use type=6
quantile(bwt, probs = c(5,10,25,50,75)/100, type=6)
IQR(bwt,type=6)
fivenum(bwt)
df$race<- factor(df$race,levels=c(1,2,3),labels=c("White","Black","Other"))
# Load functions
source('functions.R')
# Load the libraries
library(psych)
library(e1071)
library(caret)
library(fBasics)
# Load the data
df<-read.csv(file.choose()) #lowbw.csv
#df <-read.csv("d:/data/diabetes.csv")
# count blanks remove blanks
colSums(!is.na(df))
df <- na.omit(df)
#colSums(!is.na(df))
# clean the data names and data
df<-cleanit(df)
# remove a column
df$id <-NULL
df$race<- factor(df$race,levels=c(1,2,3),labels=c("White","Black","Other"))
df$smoke<- factor(df$smoke,levels=c(0,1),labels=c("Nonsmoker","Smoker"))
df$ht<- factor(df$ht,levels=c(0,1),labels=c("NormalBP","HighBP"))
df$ui<- factor(df$ui,levels=c(0,1),labels=c("NoInfection","Infection"))
# REQUIRES caret package to split
# separate data into test and train sets, 75/25 split in this case
splitIndex <- createDataPartition(df$low, p = 0.75, list = FALSE)
train <- df[splitIndex, ]
test <- df[-splitIndex, ]
# Make some data frames to use
testInd <- test[ ,!colnames(test) %in% "low"]
testDep <- as.factor(test[, names(test) == "low"])
trainInd <- train[ ,!colnames(train) %in% "low"]
trainDep <- as.factor(train[, names(train) == "low"])
# do the random split (25% held out for test), put the label back into the data frame
df$istest <- runif(nrow(df))<0.25
df$datalabel <- ifelse(df$istest,"test data","train data")
dftrain = df[!df$istest,]
dftest = df[df$istest,]
# remove unneeded columns
cols<-c("istest","datalabel")
dftrain<-dftrain[,!names(dftrain) %in% cols]
dftest<-dftest[,!names(dftest) %in% cols]
#remove uneeded variables and dataframes
rm(df,splitIndex,test,train,cols)
# Continous data use type=6
quantile(bwt, probs = c(5,10,25,50,75)/100, type=6)
IQR(bwt,type=6)
fivenum(bwt)
# REQUIRES psych package
describe(dftrain$bwt, type=1)
describeBy(dftrain$bwt,dftrain$low, type=1)
#aggreate
aggregate(age~low,mean,data=dftrain)
aggregate(age~low,fivenum,data=dftrain)
aggregate(age~low,median,data=dftrain)
aggregate(age~low,sd,data=dftrain)
aggregate(age~low,IQR,type=6,data=dftrain)
aggregate(age~low,skewness,type=1,data=dftrain)
aggregate(age~low,kurtosis,type=1,data=dftrain)
# View some basic boxplots
boxplot(dftrain$age~dftrain$low, xlab="Survived", ylab="Age")
boxplot(dftrain$lwt~dftrain$low, xlab="Survived", ylab="Log Fare")
boxplot(dftrain$ftv~dftrain$low, xlab="Diabetes", ylab="Diastolic Blood Pressure")
# View a dotplot
dotchart(dftrain$age, xlab="Plasma Glucose")
# View Stripchart
stripchart(dftrain$age~dftrain$low,method="jitter", pch=c(1,2), col=c("red","blue"), xlab="Age", ylab="Survived", main="Age vs. Survived",offset=0.5)
stripchart(dftrain$age~dftrain$low,method="stack", pch=c(1,2), col=c("red","blue"), xlab="Plasma Glucose", ylab="Diabetes", main="Diabetes vs. Plasma Glucose",offset=0.5)
# two-way contingency table of categorical outcome and predictors we want
#  to make sure there are not 0 cells
xtabs(~low + age, data = dftrain)
summary(xtabs(~low + age, data = dftrain))
xtabs(~low + lwt, data = dftrain)
summary(xtabs(~low + lwt, data = dftrain))
xtabs(~ smoke + low, data = dftrain)
summary(xtabs(~smoke + low, data = dftrain))
xtabs(~ ui + low, data = dftrain)
summary(xtabs(~ui + low, data = dftrain))
# 2 way Freq Tables
# mytable <- table(A,B) # A will be rows(Dependent), B will be columns (Independent)
table(dftrain$low, dftrain$age)
sum(table(dftrain$low, dftrain$age))
margin.table(table(dftrain$low, dftrain$age),1) # Row frequencies (summed over columns)
margin.table(table(dftrain$low, dftrain$age),2) # Column frequencies (summed over rows)
prop.table(table(dftrain$low, dftrain$age))# cell percentages relative frequences accross all
prop.table(table(dftrain$low, dftrain$age),1)# row percentages
prop.table(table(dftrain$low, dftrain$age),2) # Column percentages
addmargins(table(dftrain$low, dftrain$age), margin=2) # Margin containing row sums
addmargins(table(dftrain$low, dftrain$age), margin=1) # Margin containing column sums
addmargins(table(dftrain$low, dftrain$age), FUN=sum) # Marginal sums
addmargins(table(dftrain$low, dftrain$age), FUN=mean) # Marginal means
addmargins(table(dftrain$low, dftrain$age), FUN = list(Sum = sum, list(Min = min, Max = max))) # Marginal
addmargins(table(dftrain$low, dftrain$age),  FUN = list(list(Min = min, Max = max), Sum = sum)) # Marginal
addmargins(table(dftrain$low, dftrain$age),  FUN = list(list(Sum = sum), Sum = sum)) # Marginal
cbind("SampleSize"=aggregate(age ~ race+smoke+ht+ui, dftest, length), "mean"=aggregate(age ~ race+smoke+ht+ui, dftest, mean)[,6],"StdErr"=aggregate(age ~ race+smoke+ht+ui, dftest, st.err)[,6])
aggregate(age ~ race+smoke+ht+ui, dftest, length)
cbind("SampleSize"=aggregate(age ~ race+smoke+ht+ui, dftest, length), "mean"=aggregate(age ~ race+smoke+ht+ui, dftest, mean)[,4],"StdErr"=aggregate(age ~ race+smoke+ht+ui, dftest, st.err)[,4])
cbind("SampleSize"=aggregate(age ~ race+smoke+ht+ui, dftest, length), "mean"=aggregate(age ~ race+smoke+ht+ui, dftest, mean)[,5],"StdErr"=aggregate(age ~ race+smoke+ht+ui, dftest, st.err)[,5])
cbind("SampleSize"=aggregate(lwt ~ race+smoke+ht+ui, dftest, length), "mean"=aggregate(lwt ~ race+smoke+ht+ui, dftest, mean)[,5],"StdErr"=aggregate(lwt ~ race+smoke+ht+ui, dftest, st.err)[,5])
cbind("SampleSize"=aggregate(bwt ~ race+smoke+ht+ui, dftest, length), "mean"=aggregate(bwt ~ race+smoke+ht+ui, dftest, mean)[,5],"StdErr"=aggregate(bwt ~ race+smoke+ht+ui, dftest, st.err)[,5])
qplot(age, low, color=factor(race), data=dftrain, geom=c("point", "smooth"))
qplot(lwt, low, color=factor(race), data=dftrain, geom=c("point", "smooth"))
qplot(age, smoke, color=factor(race), data=dftrain, geom=c("point", "smooth"))
qplot(age, ui, color=factor(race), data=dftrain, geom=c("point", "smooth"))
qplot(age, ftvlor=factor(race), data=dftrain, geom=c("point", "smooth"))
qplot(age, ftv, color=factor(race), data=dftrain, geom=c("point", "smooth"))
qplot(age, bwt, color=factor(race), data=dftrain, geom=c("point", "smooth"))
hist(dftrain$bwt)
rug(dftrain$bwt)
outliers(dftrain$bwt)
plot(outliers(dftrain$bwt)$Z)
plot(density(mdftrain$bwt,na.rm=TRUE))
plot(density(dftrain$bwt,na.rm=TRUE))
plot (sort(dftrain$bwt))
plot (sort(dftrain$bwt))
