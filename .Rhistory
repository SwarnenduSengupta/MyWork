df$istest <- runif(nrow(df))<0.25
df$datalabel <- ifelse(df$istest,"test data","train data")
dftrain = df[!df$istest,]
dftest = df[df$istest,]
#remove the DF
rm(df)
# remove unneeded columns
cols<-c("istest","datalabel")
dftrain<-dftrain[,!names(dftrain) %in% cols]
dftest<-dftest[,!names(dftest) %in% cols]
rm(cols)
# attach for working
attach(dftrain)
lm(myopic~.,data=dftrain,family=binomial(link="logit"))
fit<-lm(myopic~.,data=dftrain,family=binomial(link="logit"))
summary(fit)
predict(dftest,fit)
?predict
?predict.glm
predict.glm(fit,data=dftest)
predict.glm(fit,data=dftest,type=c("link"))
predict.glm(fit,data=dftest,type=c("response"))
prediction<-predict.glm(fit,data=dftest,type=c("response"))
fit<-glm(myopic~.,data=dftrain,family=binomial(link="logit"))
fit<-glm(myopic~.,data=dftrain,family=binomial(link="logit"))
summary(fit)
prediction<-predict.glm(fit,data=dftest,type=c("response"))
table(dftest$myopic,predicition)
table(dftest$myopic,prediction)
prediction<-predict.glm(fit,data=dftest,type=c("response"))
?predict.glm
prediction
fit$residuals
View(dftrain)
View(dftest)
df <-read.csv("d:/data/myopia.csv")
# count blanks remove blanks
colSums(!is.na(df))
#df <- na.omit(df)
#colSums(!is.na(df))
# clean the data names and data
names(df)<-tolower(names(df))
names(df) <- gsub("\\(","",names(df))
names(df) <- gsub("\\)","",names(df))
names(df) <- gsub("\\.","",names(df))
names(df) <- gsub("_","",names(df))
names(df) <- gsub("-","",names(df))
names(df) <- gsub(",","",names(df))
# remove the id column
df$id <-NULL
df$studyyear<-NULL
# do the random split (25% held out for test), put the label back into the data frame
df$istest <- runif(nrow(df))<0.25
df$datalabel <- ifelse(df$istest,"test data","train data")
dftrain = df[!df$istest,]
dftest = df[df$istest,]
#remove the DF
rm(df)
# remove unneeded columns
cols<-c("istest","datalabel","row.names")
dftrain<-dftrain[,!names(dftrain) %in% cols]
dftest<-dftest[,!names(dftest) %in% cols]
rm(cols)
View(dftrain)
cols<-c("istest","datalabel","row.names")
dftrain<-dftrain[,!names(dftrain) %in% cols]
dftest<-dftest[,!names(dftest) %in% cols]
View(dftest)
View(dftest)
dftrain$row.names<-NULL
View(dftrain)
summary(lm(race~age,family=binomial(link="logit")))
fit<-glm(myopic~.,data=dftrain,family=binomial(link="logit"))
summary(fit)
prediction<-predict.glm(fit,data=dftest,type=c("response"))
```
View(dftest)
prediction<-predict.glm(fit,dftest,type="response")
table(dftest$myopic,prediction)
fit<-glm(myopic~.,data=dftrain,family=binomial)
summary(fit)
prediction<-predict.glm(fit,dftest,type="response")
summary(fit) # display results
confint(fit) # 95% CI for the coefficients
exp(coef(fit)) # exponentiated coefficients
exp(confint(fit)) # 95% CI for exponentiated coefficients
predict(fit, type="response") # predicted values
residuals(fit, type="deviance") # residuals
summary(predicition)
summary(prediction)
# Clear the environment
rm(list=ls())
# Turn off scientific notations for numbers
options(scipen = 999)
# Set locale
Sys.setlocale("LC_ALL", "English")
# Set seed for reproducibility
set.seed(2345)
df <-read.csv("d:/data/myopia.csv")
# count blanks remove blanks
colSums(!is.na(df))
#df <- na.omit(df)
#colSums(!is.na(df))
# clean the data names and data
names(df)<-tolower(names(df))
names(df) <- gsub("\\(","",names(df))
names(df) <- gsub("\\)","",names(df))
names(df) <- gsub("\\.","",names(df))
names(df) <- gsub("_","",names(df))
names(df) <- gsub("-","",names(df))
names(df) <- gsub(",","",names(df))
# remove the id column
df$id <-NULL
df$studyyear<-NULL
# do the random split (25% held out for test), put the label back into the data frame
df$istest <- runif(nrow(df))<0.25
df$datalabel <- ifelse(df$istest,"test data","train data")
dftrain = df[!df$istest,]
dftest = df[df$istest,]
#remove the DF
#rm(df)
# remove unneeded columns
cols<-c("istest","datalabel")
dftrain<-dftrain[,!names(dftrain) %in% cols]
dftest<-dftest[,!names(dftest) %in% cols]
rm(cols)
fit<-glm(myopic~spheq,data=dftrain,family=binomial)
summary(fit) # display results
cols<-c("istest","datalabel")
df<-df[,!names(df) %in% cols]
attach(df)
summary(df)
rm(cols)
plot(myopic,spheq)
plot(spheq,myopic,)
plot(df$spheq,df$myopic,)
plot(dftrain$spheq,dftrain$myopic,)
summary(fit) # display results
confint(fit) # 95% CI for the coefficients
exp(coef(fit)) # exponentiated coefficients
exp(confint(fit)) # 95% CI for exponentiated coefficients
predict(fit, type="response") # predicted values
residuals(fit, type="deviance") # residuals
fit<-glm(myopic~spheq,data=df,family=binomial)
summary(fit) # display results
confint(fit) # 95% CI for the coefficients
exp(coef(fit)) # exponentiated coefficients
xtabs(~myopic + spheq, data = df)
xtabs(~myopic + age, data = df)
xtabs(~myopic + gender, data = df)
xtabs(~myopic + readhr, data = df)
xtabs(~myopic + age, data = dftrain)
xtabs(~myopic + gender, data = dftrain)
sapply(df,mean)
sapply(df,median)
sapply(df,sd)
sapply(dftrain,mean)
sapply(dftrain,median)
sapply(dftrain,sd)
IQR(plasmaglucose,type=6)
rm(list=ls())
# Turn off scientific notations for numbers
options(scipen = 999)
# Set locale
Sys.setlocale("LC_ALL", "English")
# Set seed for reproducibility
set.seed(2345)
# Load the libraries
library(psych)
library(e1071)
library(caret)
# Load the data
#df<-read.csv(file.choose())
df <-read.csv("d:/data/diabetes.csv")
# count blanks remove blanks
colSums(!is.na(df))
#df <- na.omit(df)
#colSums(!is.na(df))
# clean the data names and data
names(df) <-tolower(names(df))
names(df) <- gsub("\\(","",names(df))
names(df) <- gsub("\\)","",names(df))
names(df) <- gsub("\\.","",names(df))
names(df) <- gsub("_","",names(df))
names(df) <- gsub("-","",names(df))
names(df) <- gsub(",","",names(df))
# remove a column
#df$obsno <-NULL
# REQUIRES caret package to split
# separate data into test and train sets, 75/25 split in this case
splitIndex <- createDataPartition(df$diabetes, p = 0.75, list = FALSE)
train <- df[splitIndex, ]
test <- df[-splitIndex, ]
# Make some data frames to use
testInd <- test[ ,!colnames(test) %in% "diabetes"]
testDep <- as.factor(test[, names(test) == "diabetes"])
trainInd <- train[ ,!colnames(train) %in% "diabetes"]
trainDep <- as.factor(train[, names(train) == "diabetes"])
# do the random split (25% held out for test), put the label back into the data frame
df$istest <- runif(nrow(df))<0.25
df$datalabel <- ifelse(df$istest,"test data","train data")
dftrain = df[!df$istest,]
dftest = df[df$istest,]
remove unneeded columns
cols<-c("istest","datalabel")
dftrain<-dftrain[,!names(dftrain) %in% cols]
dftest<-dftest[,!names(dftest) %in% cols]
#remove uneeded variables and dataframes
rm(df,splitIndex,test,train,cols)
# attach for working
attach(dftrain)
xtabs(~diabetes + plasmaglucose, data = dftrain)
xtabs(~diabetes + timepregnant, data = dftrain)
xtabs(~diabetes + timepregnant, data = dftrain)
xtabs(~diabetes + timespregnant, data = dftrain)
# Clear the environment
rm(list=ls())
# Turn off scientific notations for numbers
options(scipen = 999)
# Set locale
Sys.setlocale("LC_ALL", "English")
# Set seed for reproducibility
set.seed(2345)
# Load the data
#df<-read.csv(file.choose())
#df <-read.csv("d:/data/icu.csv")
df <-read.csv("d:/data/myopia.csv")
# count blanks remove blanks
colSums(!is.na(df))
#df <- na.omit(df)
#colSums(!is.na(df))
# clean the data names and data
names(df)<-tolower(names(df))
names(df) <- gsub("\\(","",names(df))
names(df) <- gsub("\\)","",names(df))
names(df) <- gsub("\\.","",names(df))
names(df) <- gsub("_","",names(df))
names(df) <- gsub("-","",names(df))
names(df) <- gsub(",","",names(df))
# remove the id column
df$id <-NULL
df$studyyear<-NULL
# Convert Integers to Factors for ALL but 3 columns
#cols <-  c("age", "sys", "hra")
#dfwithout <-df[!names(df) %in% cols]
#dfwith<-df[names(df) %in% cols]
#dfwithout[,] <- lapply(dfwithout[,], factor)
#df<-cbind(dfwithout,dfwith)
#rm(dfwith)
#rm(dfwithout)
# do the random split (25% held out for test), put the label back into the data frame
df$istest <- runif(nrow(df))<0.25
df$datalabel <- ifelse(df$istest,"test data","train data")
dftrain = df[!df$istest,]
dftest = df[df$istest,]
# remove unneeded columns
cols<-c("istest","datalabel")
dftrain<-dftrain[,!names(dftrain) %in% cols]
dftest<-dftest[,!names(dftest) %in% cols]
df<-df[,!names(df) %in% cols]
rm(cols)
# attach for working and look at a summary
attach(df)
summary(df)
xtabs(~myopic + gender, data = dftrain)
fit<-glm(myopic~spheq,data=df,family=binomial)
summary(fit) # display results
confint(fit) # 95% CI for the coefficients using profiled log-likelihood
confint.default(fit) # 95% CI for the coefficients using standard errors
exp(coef(fit)) # exponentiated coefficients a.k.a odds ratios
exp(confint(fit)) # 95% CI for exponentiated coefficients
exp(cbind(OR = coef(fit), confint(fit))) ## odds ratios and 95% CI together
plot((myopic~spheq, data=df)
plot((myopic~spheq, data=df)
plot((myopic ~ spheq, data=df)
plot((myopic,spheq, data=df)
fit$fitted
fit<-glm(myopic~age,data=df,family=binomial)
summary(fit) # display results
lines(df$age, fit$fitted, type="l", col="red")
plot(Menarche/Total ~ age, data=df)
plot(myopic ~ age, data=df)
lines(df$age, fit$fitted, type="l", col="red")
fit<-glm(myopic~spheq,data=df,family=binomial)
summary(fit) # display results
require(lmtest)
lrtest(fit)
fit<-glm(myopic~spheq,data=df,family=binomial)
lrtest(fit)
lrtest(fit,fit)
anova(fit)
anova(fit,chi)
?anova
anova(fit,test='Chisq')
anova(fit,test='LRT')
anova(fit,test="LRT")
anova(fit,fit,test='LRT')
anova(fit,test='Chisq')
?anova
?logLik
logLik(fit)
d<-anova(fit,test='Chisq')
d$deviance
d$Deviance
e<-anova(fit,test='LRT')
e$Deviance
df <-read.csv("d:/data/icu.csv")
# count blanks remove blanks
colSums(!is.na(df))
#df <- na.omit(df)
#colSums(!is.na(df))
# clean the data names and data
names(df)<-tolower(names(df))
names(df) <- gsub("\\(","",names(df))
names(df) <- gsub("\\)","",names(df))
names(df) <- gsub("\\.","",names(df))
names(df) <- gsub("_","",names(df))
names(df) <- gsub("-","",names(df))
names(df) <- gsub(",","",names(df))
df$id <-NULL
# do the random split (25% held out for test), put the label back into the data frame
df$istest <- runif(nrow(df))<0.25
df$datalabel <- ifelse(df$istest,"test data","train data")
dftrain = df[!df$istest,]
dftest = df[df$istest,]
#remove the DF
#rm(df)
# remove unneeded columns
cols<-c("istest","datalabel")
dftrain<-dftrain[,!names(dftrain) %in% cols]
dftest<-dftest[,!names(dftest) %in% cols]
df<-df[,!names(df) %in% cols]
rm(cols)
# attach for working and look at a summary
attach(df)
summary(df)
sapply(df,mean)
sapply(df,median)
sapply(df,sd)
fit<-glm(sta~age,data=df,family=binomial)
summary(fit) # display results
confint(fit) # 95% CI for the coefficients using profiled log-likelihood
d<-anova(fit,test='Chisq') # or d<-anova(fit,test='LRT')
d$Deviance
logLik(fit) ##-168.724
exp(cbind(OR = coef(fit), confint(fit))) ## odds ratios and 95% CI together
summary(fit) # display results
predict(fit, dftest, type="response") # predicted values
residuals(fit, type="deviance") # residuals
z<-predict(fit, dftest, type="response") # predicted values
prediction
prediction<-predict(fit, dftest, type="response") # predicted values
prediction
plot(prediction,dftest$diabetes)
plot(prediction,dftest$sta)
fit<-glm(myopic~spheq,data=df,family=binomial)
fit<-glm(myopic~spheq,data=dftrain,family=binomial)
confint(fit) # 95% CI for the coefficients using profiled log-likelihood
confint.default(fit) # 95% CI for the coefficients using standard errors
exp(coef(fit)) # exponentiated coefficients a.k.a odds ratios
exp(confint(fit)) # 95% CI for exponentiated coefficients
exp(cbind(OR = coef(fit), confint(fit))) ## odds ratios and 95% CI together
d<-anova(fit,test='Chisq') # or d<-anova(fit,test='LRT')
# get LR
d$Deviance
# Get loglikelihood
logLik(fit) ##-168.724
#REQUIRES lmtest package
lrtest(fit,fit) # get loglikelhood
prediction<-predict(fit, dftest, type="response") # predicted values
prediction<-predict(fit, dftest, type="response") # predicted values
fit<-glm(sta~age,data=dftrain,family=binomial)
summary(fit) # display results
confint(fit) # 95% CI for the coefficients using profiled log-likelihood
confint.default(fit) # 95% CI for the coefficients using standard errors
exp(coef(fit)) # exponentiated coefficients a.k.a odds ratios
exp(confint(fit)) # 95% CI for exponentiated coefficients
exp(cbind(OR = coef(fit), confint(fit))) ## odds ratios and 95% CI together
d<-anova(fit,test='Chisq') # or d<-anova(fit,test='LRT')
# get LR
d$Deviance
# Get loglikelihood
logLik(fit) ##-168.724
#REQUIRES lmtest package
lrtest(fit,fit) # get loglikelhood
prediction<-predict(fit, dftest, type="response") # predicted values
residuals(fit, type="deviance") # residuals
plot(prediction,dftest$sta)
plot(dftest$sta,prediction)
table(dftest$sta,prediction)
#remove the DF
rm(df)
# attach for working and look at a summary
attach(dftest)
summary(dftest)
# Statistics
sapply(dftest,mean)
sapply(dftest,median)
sapply(dftest,sd)
depvar <- 'sta'
indepvars <- c('age')
plot(depvar,indepvars)
f1 <- paste(depvar,paste(indepvars,collapse=' + '),sep=' ~ ')
fit<-glm(f1,data=dftrain,family=binomial)
summary(fit) # display results
# Clear the environment
rm(list=ls())
# Turn off scientific notations for numbers
options(scipen = 999)
# Set locale
Sys.setlocale("LC_ALL", "English")
# Set seed for reproducibility
set.seed(2345)
df <-read.csv("d:/data/icu.csv")
colSums(!is.na(df))
names(df)<-tolower(names(df))
names(df) <- gsub("\\(","",names(df))
names(df) <- gsub("\\)","",names(df))
names(df) <- gsub("\\.","",names(df))
names(df) <- gsub("_","",names(df))
names(df) <- gsub("-","",names(df))
names(df) <- gsub(",","",names(df))
# remove the id column
df$id <-NULL
df$studyyear<-NULL
df$istest <- runif(nrow(df))<0.25
df$datalabel <- ifelse(df$istest,"test data","train data")
dftrain = df[!df$istest,]
dftest = df[df$istest,]
# remove unneeded columns
cols<-c("istest","datalabel")
dftrain<-dftrain[,!names(dftrain) %in% cols]
dftest<-dftest[,!names(dftest) %in% cols]
df<-df[,!names(df) %in% cols]
rm(cols)
#remove the DF
rm(df)
# remove unneeded columns
cols<-c("istest","datalabel")
dftrain<-dftrain[,!names(dftrain) %in% cols]
dftest<-dftest[,!names(dftest) %in% cols]
df<-df[,!names(df) %in% cols]
rm(cols)
#remove the DF
rm(df)
# attach for working and look at a summary
attach(dftrain)
summary(dftrain)
# Statistics
sapply(dftrain,mean)
sapply(dftrain,median)
sapply(dftrain,sd)
?lappy
?lapply
?sapply
f1 <- paste(depvar,paste(indepvars,collapse=' + '),sep=' ~ ')
#Dep and Independent Vars
# define columns we will be working with
depvar <- 'sta'
indepvars <- c('age')
f1 <- paste(depvar,paste(indepvars,collapse=' + '),sep=' ~ ')
fit<-glm(f1,data=dftrain,family=binomial)
plot(depvar,indepvars)
plot(f1)
indepvar <- 'age'
indepvars <-c('age','sex')
f1 <- paste(depvar,paste(indepvars,collapse=' + '),sep=' ~ ')
fit<-glm(f1,data=dftrain,family=binomial)
summary(fit) # display results
d<-anova(fit,test='Chisq') # or d<-anova(fit,test='LRT')
d$Deviance
logLik(fit) ##-168.724
lrtest(fit,fit) # get loglikelhood
residuals(fit, type="deviance") # residuals
prediction<-predict(fit, dftest, type="response") # predicted values
residuals(fit, type="deviance") # residuals
table(dftest$sta,prediction)
prediction
hist(prediciton)
hist(prediction)
plot(dftest$indepvar,dftest$depvar)
dftrain$indepvar
indepvar
plot(indepvar,depvar)
age
plot(paste(indepvar),paste(depvar)
)
plot(paste(indepvar),paste(depvar))
plot((depvar,paste(indepvar,collapse=' + '),sep=' ~ '))
plot((depvar,paste(indepvar,collapse=' + '),sep=','))
plot((depvar,paste(indepvars,collapse=' + '),sep=','))
depvar,paste(indepvars,collapse=' + '),sep=',')
paste(depvar,paste(indepvars,collapse=' + '),sep=' ~ ')
plot(paste(depvar,paste(indepvars,collapse=' + '),sep=' ~ '))
plot(paste(depvar,paste(indepvars,collapse=' + '),sep=' ,'))
xtabs(~depvar + indepvar, data = dftrain)
xtabs(~sta +age,data=dftrin)
xtabs(~sta +age,data=dftrAin)
xtabs(~sta +age,data=dftrain)
get(indepvar)
xtabs(~get(depvar) + get(indepvar), data = dftrain)
plot(get(indepvar),get(depvar))
xtabs(~get(depvar) + get(indepvars), data = dftrain)
prediction<-predict(fit, dftest, type="response") # predicted values
sum(prediciton)
sum(prediction)
library(randomForest)
fit <- randomForest(as.factor(diabetes) ~ .,   data=dftrain)
print(fit) # view results
importance(fit) # importance of each predictor
varImpPlot(fit)
plot(fit)
